// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.eventgrid/v1alpha1api20200601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.eventgrid.azure.com,resources=eventsubscriptions,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.eventgrid.azure.com,resources={eventsubscriptions/status,eventsubscriptions/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/unknown_resourceDefinitions/eventSubscriptions
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscriptions_Spec  `json:"spec,omitempty"`
	Status            EventSubscription_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &EventSubscription{}

// GetConditions returns the conditions of the resource
func (eventSubscription *EventSubscription) GetConditions() conditions.Conditions {
	return eventSubscription.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (eventSubscription *EventSubscription) SetConditions(conditions conditions.Conditions) {
	eventSubscription.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=default.v1alpha1api20200601.eventsubscriptions.microsoft.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &EventSubscription{}

// Default applies defaults to the EventSubscription resource
func (eventSubscription *EventSubscription) Default() {
	eventSubscription.defaultImpl()
	var temp interface{} = eventSubscription
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (eventSubscription *EventSubscription) defaultAzureName() {
	if eventSubscription.Spec.AzureName == "" {
		eventSubscription.Spec.AzureName = eventSubscription.Name
	}
}

// defaultImpl applies the code generated defaults to the EventSubscription resource
func (eventSubscription *EventSubscription) defaultImpl() { eventSubscription.defaultAzureName() }

var _ genruntime.KubernetesResource = &EventSubscription{}

// AzureName returns the Azure name of the resource
func (eventSubscription *EventSubscription) AzureName() string {
	return eventSubscription.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (eventSubscription *EventSubscription) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindExtension
}

// GetSpec returns the specification of this resource
func (eventSubscription *EventSubscription) GetSpec() genruntime.ConvertibleSpec {
	return &eventSubscription.Spec
}

// GetStatus returns the status of this resource
func (eventSubscription *EventSubscription) GetStatus() genruntime.ConvertibleStatus {
	return &eventSubscription.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.EventGrid/eventSubscriptions"
func (eventSubscription *EventSubscription) GetType() string {
	return "Microsoft.EventGrid/eventSubscriptions"
}

// NewEmptyStatus returns a new empty (blank) status
func (eventSubscription *EventSubscription) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &EventSubscription_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (eventSubscription *EventSubscription) Owner() *genruntime.ResourceReference {
	return &genruntime.ResourceReference{
		Group:     eventSubscription.Spec.Owner.Group,
		Kind:      eventSubscription.Spec.Owner.Kind,
		Namespace: eventSubscription.Namespace,
		Name:      eventSubscription.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (eventSubscription *EventSubscription) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*EventSubscription_Status); ok {
		eventSubscription.Status = *st
		return nil
	}

	// Convert status to required version
	var st EventSubscription_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	eventSubscription.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-eventgrid-azure-com-v1alpha1api20200601-eventsubscription,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.eventgrid.azure.com,resources=eventsubscriptions,verbs=create;update,versions=v1alpha1api20200601,name=validate.v1alpha1api20200601.eventsubscriptions.microsoft.eventgrid.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &EventSubscription{}

// ValidateCreate validates the creation of the resource
func (eventSubscription *EventSubscription) ValidateCreate() error {
	validations := eventSubscription.createValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (eventSubscription *EventSubscription) ValidateDelete() error {
	validations := eventSubscription.deleteValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (eventSubscription *EventSubscription) ValidateUpdate(old runtime.Object) error {
	validations := eventSubscription.updateValidations()
	var temp interface{} = eventSubscription
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (eventSubscription *EventSubscription) createValidations() []func() error {
	return []func() error{eventSubscription.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (eventSubscription *EventSubscription) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (eventSubscription *EventSubscription) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return eventSubscription.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (eventSubscription *EventSubscription) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&eventSubscription.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromEventSubscription populates our EventSubscription from the provided source EventSubscription
func (eventSubscription *EventSubscription) AssignPropertiesFromEventSubscription(source *v1alpha1api20200601storage.EventSubscription) error {

	// Spec
	var spec EventSubscriptions_Spec
	err := spec.AssignPropertiesFromEventSubscriptionsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromEventSubscriptionsSpec()")
	}
	eventSubscription.Spec = spec

	// Status
	var status EventSubscription_Status
	err = status.AssignPropertiesFromEventSubscriptionStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromEventSubscriptionStatus()")
	}
	eventSubscription.Status = status

	// No error
	return nil
}

// AssignPropertiesToEventSubscription populates the provided destination EventSubscription from our EventSubscription
func (eventSubscription *EventSubscription) AssignPropertiesToEventSubscription(destination *v1alpha1api20200601storage.EventSubscription) error {

	// Spec
	var spec v1alpha1api20200601storage.EventSubscriptions_Spec
	err := eventSubscription.Spec.AssignPropertiesToEventSubscriptionsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToEventSubscriptionsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20200601storage.EventSubscription_Status
	err = eventSubscription.Status.AssignPropertiesToEventSubscriptionStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToEventSubscriptionStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (eventSubscription *EventSubscription) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: eventSubscription.Spec.OriginalVersion(),
		Kind:    "EventSubscription",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/unknown_resourceDefinitions/eventSubscriptions
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

//Generated from:
type EventSubscription_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DeadLetterDestination: The DeadLetter destination of the event subscription.
	DeadLetterDestination *DeadLetterDestination_Status `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination where events have to be delivered
	//for the event subscription.
	Destination *EventSubscriptionDestination_Status `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesStatusEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Information about the filter for the event subscription.
	Filter *EventSubscriptionFilter_Status `json:"filter,omitempty"`

	//Id: Fully qualified identifier of the resource.
	Id *string `json:"id,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//Name: Name of the resource.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: Provisioning state of the event subscription.
	ProvisioningState *EventSubscriptionPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//RetryPolicy: The retry policy for events. This can be used to configure maximum
	//number of delivery attempts and time to live for events.
	RetryPolicy *RetryPolicy_Status `json:"retryPolicy,omitempty"`

	//SystemData: The system metadata relating to Event Subscription resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Topic: Name of the topic of the event subscription.
	Topic *string `json:"topic,omitempty"`

	//Type: Type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &EventSubscription_Status{}

// ConvertStatusFrom populates our EventSubscription_Status from the provided source
func (eventSubscriptionStatus *EventSubscription_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate our instance from source
		return eventSubscriptionStatus.AssignPropertiesFromEventSubscriptionStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = eventSubscriptionStatus.AssignPropertiesFromEventSubscriptionStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscription_Status)
	if ok {
		// Populate destination from our instance
		return eventSubscriptionStatus.AssignPropertiesToEventSubscriptionStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscription_Status{}
	err := eventSubscriptionStatus.AssignPropertiesToEventSubscriptionStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &EventSubscription_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionStatus *EventSubscription_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscription_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionStatus *EventSubscription_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscription_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscription_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeadLetterDestination != nil {
			var deadLetterDestination1 DeadLetterDestination_Status
			err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
			if err != nil {
				return err
			}
			deadLetterDestination := deadLetterDestination1
			eventSubscriptionStatus.DeadLetterDestination = &deadLetterDestination
		}
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Destination != nil {
			var destination1 EventSubscriptionDestination_Status
			err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
			if err != nil {
				return err
			}
			destination := destination1
			eventSubscriptionStatus.Destination = &destination
		}
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EventDeliverySchema != nil {
			eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
			eventSubscriptionStatus.EventDeliverySchema = &eventDeliverySchema
		}
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExpirationTimeUtc != nil {
			expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
			eventSubscriptionStatus.ExpirationTimeUtc = &expirationTimeUtc
		}
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Filter != nil {
			var filter1 EventSubscriptionFilter_Status
			err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
			if err != nil {
				return err
			}
			filter := filter1
			eventSubscriptionStatus.Filter = &filter
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		eventSubscriptionStatus.Id = &id
	}

	// Set property ‘Labels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Labels {
			eventSubscriptionStatus.Labels = append(eventSubscriptionStatus.Labels, item)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		eventSubscriptionStatus.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			eventSubscriptionStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RetryPolicy != nil {
			var retryPolicy1 RetryPolicy_Status
			err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
			if err != nil {
				return err
			}
			retryPolicy := retryPolicy1
			eventSubscriptionStatus.RetryPolicy = &retryPolicy
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		eventSubscriptionStatus.SystemData = &systemData
	}

	// Set property ‘Topic’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Topic != nil {
			topic := *typedInput.Properties.Topic
			eventSubscriptionStatus.Topic = &topic
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		eventSubscriptionStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionStatus populates our EventSubscription_Status from the provided source EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) AssignPropertiesFromEventSubscriptionStatus(source *v1alpha1api20200601storage.EventSubscription_Status) error {

	// Conditions
	eventSubscriptionStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination DeadLetterDestination_Status
		err := deadLetterDestination.AssignPropertiesFromDeadLetterDestinationStatus(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "populating DeadLetterDestination from DeadLetterDestination, calling AssignPropertiesFromDeadLetterDestinationStatus()")
		}
		eventSubscriptionStatus.DeadLetterDestination = &deadLetterDestination
	} else {
		eventSubscriptionStatus.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination_Status
		err := destination.AssignPropertiesFromEventSubscriptionDestinationStatus(source.Destination)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesFromEventSubscriptionDestinationStatus()")
		}
		eventSubscriptionStatus.Destination = &destination
	} else {
		eventSubscriptionStatus.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesStatusEventDeliverySchema(*source.EventDeliverySchema)
		eventSubscriptionStatus.EventDeliverySchema = &eventDeliverySchema
	} else {
		eventSubscriptionStatus.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	eventSubscriptionStatus.ExpirationTimeUtc = genruntime.ClonePointerToString(source.ExpirationTimeUtc)

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter_Status
		err := filter.AssignPropertiesFromEventSubscriptionFilterStatus(source.Filter)
		if err != nil {
			return errors.Wrap(err, "populating Filter from Filter, calling AssignPropertiesFromEventSubscriptionFilterStatus()")
		}
		eventSubscriptionStatus.Filter = &filter
	} else {
		eventSubscriptionStatus.Filter = nil
	}

	// Id
	eventSubscriptionStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Labels
	eventSubscriptionStatus.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Name
	eventSubscriptionStatus.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := EventSubscriptionPropertiesStatusProvisioningState(*source.ProvisioningState)
		eventSubscriptionStatus.ProvisioningState = &provisioningState
	} else {
		eventSubscriptionStatus.ProvisioningState = nil
	}

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy_Status
		err := retryPolicy.AssignPropertiesFromRetryPolicyStatus(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "populating RetryPolicy from RetryPolicy, calling AssignPropertiesFromRetryPolicyStatus()")
		}
		eventSubscriptionStatus.RetryPolicy = &retryPolicy
	} else {
		eventSubscriptionStatus.RetryPolicy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		eventSubscriptionStatus.SystemData = &systemDatum
	} else {
		eventSubscriptionStatus.SystemData = nil
	}

	// Topic
	eventSubscriptionStatus.Topic = genruntime.ClonePointerToString(source.Topic)

	// Type
	eventSubscriptionStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionStatus populates the provided destination EventSubscription_Status from our EventSubscription_Status
func (eventSubscriptionStatus *EventSubscription_Status) AssignPropertiesToEventSubscriptionStatus(destination *v1alpha1api20200601storage.EventSubscription_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(eventSubscriptionStatus.Conditions)

	// DeadLetterDestination
	if eventSubscriptionStatus.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.DeadLetterDestination_Status
		err := (*eventSubscriptionStatus.DeadLetterDestination).AssignPropertiesToDeadLetterDestinationStatus(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "populating DeadLetterDestination from DeadLetterDestination, calling AssignPropertiesToDeadLetterDestinationStatus()")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if eventSubscriptionStatus.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination_Status
		err := (*eventSubscriptionStatus.Destination).AssignPropertiesToEventSubscriptionDestinationStatus(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesToEventSubscriptionDestinationStatus()")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if eventSubscriptionStatus.EventDeliverySchema != nil {
		eventDeliverySchema := string(*eventSubscriptionStatus.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	destination.ExpirationTimeUtc = genruntime.ClonePointerToString(eventSubscriptionStatus.ExpirationTimeUtc)

	// Filter
	if eventSubscriptionStatus.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter_Status
		err := (*eventSubscriptionStatus.Filter).AssignPropertiesToEventSubscriptionFilterStatus(&filter)
		if err != nil {
			return errors.Wrap(err, "populating Filter from Filter, calling AssignPropertiesToEventSubscriptionFilterStatus()")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(eventSubscriptionStatus.Id)

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(eventSubscriptionStatus.Labels)

	// Name
	destination.Name = genruntime.ClonePointerToString(eventSubscriptionStatus.Name)

	// ProvisioningState
	if eventSubscriptionStatus.ProvisioningState != nil {
		provisioningState := string(*eventSubscriptionStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RetryPolicy
	if eventSubscriptionStatus.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy_Status
		err := (*eventSubscriptionStatus.RetryPolicy).AssignPropertiesToRetryPolicyStatus(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "populating RetryPolicy from RetryPolicy, calling AssignPropertiesToRetryPolicyStatus()")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// SystemData
	if eventSubscriptionStatus.SystemData != nil {
		var systemDatum v1alpha1api20200601storage.SystemData_Status
		err := (*eventSubscriptionStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Topic
	destination.Topic = genruntime.ClonePointerToString(eventSubscriptionStatus.Topic)

	// Type
	destination.Type = genruntime.ClonePointerToString(eventSubscriptionStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptions_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DeadLetterDestination: Information about the dead letter destination for an
	//event subscription. To configure a deadletter destination, do not directly
	//instantiate an object of this class. Instead, instantiate an object of a derived
	//class. Currently, StorageBlobDeadLetterDestination is the only class that
	//derives from this class.
	DeadLetterDestination *StorageBlobDeadLetterDestination `json:"deadLetterDestination,omitempty"`

	//Destination: Information about the destination for an event subscription.
	Destination *EventSubscriptionDestination `json:"destination,omitempty"`

	//EventDeliverySchema: The event delivery schema for the event subscription.
	EventDeliverySchema *EventSubscriptionPropertiesEventDeliverySchema `json:"eventDeliverySchema,omitempty"`

	//ExpirationTimeUtc: Expiration time of the event subscription.
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty"`

	//Filter: Filter for the Event Subscription.
	Filter *EventSubscriptionFilter `json:"filter,omitempty"`

	//Labels: List of user defined labels.
	Labels []string `json:"labels,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.ArbitraryOwnerReference `json:"owner"`

	//RetryPolicy: Information about the retry policy for an event subscription.
	RetryPolicy *RetryPolicy `json:"retryPolicy,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptions_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionsSpec == nil {
		return nil, nil
	}
	var result EventSubscriptions_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = EventSubscriptionsSpecAPIVersion20200601

	// Set property ‘Location’:
	if eventSubscriptionsSpec.Location != nil {
		location := *eventSubscriptionsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if eventSubscriptionsSpec.DeadLetterDestination != nil {
		deadLetterDestinationARM, err := (*eventSubscriptionsSpec.DeadLetterDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deadLetterDestination := deadLetterDestinationARM.(StorageBlobDeadLetterDestinationARM)
		result.Properties.DeadLetterDestination = &deadLetterDestination
	}
	if eventSubscriptionsSpec.Destination != nil {
		destinationARM, err := (*eventSubscriptionsSpec.Destination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		destination := destinationARM.(EventSubscriptionDestinationARM)
		result.Properties.Destination = &destination
	}
	if eventSubscriptionsSpec.EventDeliverySchema != nil {
		eventDeliverySchema := *eventSubscriptionsSpec.EventDeliverySchema
		result.Properties.EventDeliverySchema = &eventDeliverySchema
	}
	if eventSubscriptionsSpec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *eventSubscriptionsSpec.ExpirationTimeUtc
		result.Properties.ExpirationTimeUtc = &expirationTimeUtc
	}
	if eventSubscriptionsSpec.Filter != nil {
		filterARM, err := (*eventSubscriptionsSpec.Filter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		filter := filterARM.(EventSubscriptionFilterARM)
		result.Properties.Filter = &filter
	}
	for _, item := range eventSubscriptionsSpec.Labels {
		result.Properties.Labels = append(result.Properties.Labels, item)
	}
	if eventSubscriptionsSpec.RetryPolicy != nil {
		retryPolicyARM, err := (*eventSubscriptionsSpec.RetryPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retryPolicy := retryPolicyARM.(RetryPolicyARM)
		result.Properties.RetryPolicy = &retryPolicy
	}

	// Set property ‘Scope’:
	result.Scope = resolved.Scope

	// Set property ‘Tags’:
	if eventSubscriptionsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range eventSubscriptionsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = EventSubscriptionsSpecTypeMicrosoftEventGridEventSubscriptions
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionsSpec *EventSubscriptions_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptions_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionsSpec *EventSubscriptions_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptions_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptions_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	eventSubscriptionsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DeadLetterDestination’:
	// copying flattened property:
	if typedInput.Properties.DeadLetterDestination != nil {
		var deadLetterDestination1 StorageBlobDeadLetterDestination
		err := deadLetterDestination1.PopulateFromARM(owner, *typedInput.Properties.DeadLetterDestination)
		if err != nil {
			return err
		}
		deadLetterDestination := deadLetterDestination1
		eventSubscriptionsSpec.DeadLetterDestination = &deadLetterDestination
	}

	// Set property ‘Destination’:
	// copying flattened property:
	if typedInput.Properties.Destination != nil {
		var destination1 EventSubscriptionDestination
		err := destination1.PopulateFromARM(owner, *typedInput.Properties.Destination)
		if err != nil {
			return err
		}
		destination := destination1
		eventSubscriptionsSpec.Destination = &destination
	}

	// Set property ‘EventDeliverySchema’:
	// copying flattened property:
	if typedInput.Properties.EventDeliverySchema != nil {
		eventDeliverySchema := *typedInput.Properties.EventDeliverySchema
		eventSubscriptionsSpec.EventDeliverySchema = &eventDeliverySchema
	}

	// Set property ‘ExpirationTimeUtc’:
	// copying flattened property:
	if typedInput.Properties.ExpirationTimeUtc != nil {
		expirationTimeUtc := *typedInput.Properties.ExpirationTimeUtc
		eventSubscriptionsSpec.ExpirationTimeUtc = &expirationTimeUtc
	}

	// Set property ‘Filter’:
	// copying flattened property:
	if typedInput.Properties.Filter != nil {
		var filter1 EventSubscriptionFilter
		err := filter1.PopulateFromARM(owner, *typedInput.Properties.Filter)
		if err != nil {
			return err
		}
		filter := filter1
		eventSubscriptionsSpec.Filter = &filter
	}

	// Set property ‘Labels’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Labels {
		eventSubscriptionsSpec.Labels = append(eventSubscriptionsSpec.Labels, item)
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		eventSubscriptionsSpec.Location = &location
	}

	// Set property ‘Owner’:
	eventSubscriptionsSpec.Owner = owner

	// Set property ‘RetryPolicy’:
	// copying flattened property:
	if typedInput.Properties.RetryPolicy != nil {
		var retryPolicy1 RetryPolicy
		err := retryPolicy1.PopulateFromARM(owner, *typedInput.Properties.RetryPolicy)
		if err != nil {
			return err
		}
		retryPolicy := retryPolicy1
		eventSubscriptionsSpec.RetryPolicy = &retryPolicy
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		eventSubscriptionsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			eventSubscriptionsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &EventSubscriptions_Spec{}

// ConvertSpecFrom populates our EventSubscriptions_Spec from the provided source
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20200601storage.EventSubscriptions_Spec)
	if ok {
		// Populate our instance from source
		return eventSubscriptionsSpec.AssignPropertiesFromEventSubscriptionsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20200601storage.EventSubscriptions_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = eventSubscriptionsSpec.AssignPropertiesFromEventSubscriptionsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20200601storage.EventSubscriptions_Spec)
	if ok {
		// Populate destination from our instance
		return eventSubscriptionsSpec.AssignPropertiesToEventSubscriptionsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20200601storage.EventSubscriptions_Spec{}
	err := eventSubscriptionsSpec.AssignPropertiesToEventSubscriptionsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromEventSubscriptionsSpec populates our EventSubscriptions_Spec from the provided source EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) AssignPropertiesFromEventSubscriptionsSpec(source *v1alpha1api20200601storage.EventSubscriptions_Spec) error {

	// AzureName
	eventSubscriptionsSpec.AzureName = source.AzureName

	// DeadLetterDestination
	if source.DeadLetterDestination != nil {
		var deadLetterDestination StorageBlobDeadLetterDestination
		err := deadLetterDestination.AssignPropertiesFromStorageBlobDeadLetterDestination(source.DeadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "populating DeadLetterDestination from DeadLetterDestination, calling AssignPropertiesFromStorageBlobDeadLetterDestination()")
		}
		eventSubscriptionsSpec.DeadLetterDestination = &deadLetterDestination
	} else {
		eventSubscriptionsSpec.DeadLetterDestination = nil
	}

	// Destination
	if source.Destination != nil {
		var destination EventSubscriptionDestination
		err := destination.AssignPropertiesFromEventSubscriptionDestination(source.Destination)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesFromEventSubscriptionDestination()")
		}
		eventSubscriptionsSpec.Destination = &destination
	} else {
		eventSubscriptionsSpec.Destination = nil
	}

	// EventDeliverySchema
	if source.EventDeliverySchema != nil {
		eventDeliverySchema := EventSubscriptionPropertiesEventDeliverySchema(*source.EventDeliverySchema)
		eventSubscriptionsSpec.EventDeliverySchema = &eventDeliverySchema
	} else {
		eventSubscriptionsSpec.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if source.ExpirationTimeUtc != nil {
		expirationTimeUtc := *source.ExpirationTimeUtc
		eventSubscriptionsSpec.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		eventSubscriptionsSpec.ExpirationTimeUtc = nil
	}

	// Filter
	if source.Filter != nil {
		var filter EventSubscriptionFilter
		err := filter.AssignPropertiesFromEventSubscriptionFilter(source.Filter)
		if err != nil {
			return errors.Wrap(err, "populating Filter from Filter, calling AssignPropertiesFromEventSubscriptionFilter()")
		}
		eventSubscriptionsSpec.Filter = &filter
	} else {
		eventSubscriptionsSpec.Filter = nil
	}

	// Labels
	eventSubscriptionsSpec.Labels = genruntime.CloneSliceOfString(source.Labels)

	// Location
	eventSubscriptionsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	eventSubscriptionsSpec.Owner = source.Owner.Copy()

	// RetryPolicy
	if source.RetryPolicy != nil {
		var retryPolicy RetryPolicy
		err := retryPolicy.AssignPropertiesFromRetryPolicy(source.RetryPolicy)
		if err != nil {
			return errors.Wrap(err, "populating RetryPolicy from RetryPolicy, calling AssignPropertiesFromRetryPolicy()")
		}
		eventSubscriptionsSpec.RetryPolicy = &retryPolicy
	} else {
		eventSubscriptionsSpec.RetryPolicy = nil
	}

	// Tags
	eventSubscriptionsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionsSpec populates the provided destination EventSubscriptions_Spec from our EventSubscriptions_Spec
func (eventSubscriptionsSpec *EventSubscriptions_Spec) AssignPropertiesToEventSubscriptionsSpec(destination *v1alpha1api20200601storage.EventSubscriptions_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = eventSubscriptionsSpec.AzureName

	// DeadLetterDestination
	if eventSubscriptionsSpec.DeadLetterDestination != nil {
		var deadLetterDestination v1alpha1api20200601storage.StorageBlobDeadLetterDestination
		err := (*eventSubscriptionsSpec.DeadLetterDestination).AssignPropertiesToStorageBlobDeadLetterDestination(&deadLetterDestination)
		if err != nil {
			return errors.Wrap(err, "populating DeadLetterDestination from DeadLetterDestination, calling AssignPropertiesToStorageBlobDeadLetterDestination()")
		}
		destination.DeadLetterDestination = &deadLetterDestination
	} else {
		destination.DeadLetterDestination = nil
	}

	// Destination
	if eventSubscriptionsSpec.Destination != nil {
		var destinationLocal v1alpha1api20200601storage.EventSubscriptionDestination
		err := (*eventSubscriptionsSpec.Destination).AssignPropertiesToEventSubscriptionDestination(&destinationLocal)
		if err != nil {
			return errors.Wrap(err, "populating Destination from Destination, calling AssignPropertiesToEventSubscriptionDestination()")
		}
		destination.Destination = &destinationLocal
	} else {
		destination.Destination = nil
	}

	// EventDeliverySchema
	if eventSubscriptionsSpec.EventDeliverySchema != nil {
		eventDeliverySchema := string(*eventSubscriptionsSpec.EventDeliverySchema)
		destination.EventDeliverySchema = &eventDeliverySchema
	} else {
		destination.EventDeliverySchema = nil
	}

	// ExpirationTimeUtc
	if eventSubscriptionsSpec.ExpirationTimeUtc != nil {
		expirationTimeUtc := *eventSubscriptionsSpec.ExpirationTimeUtc
		destination.ExpirationTimeUtc = &expirationTimeUtc
	} else {
		destination.ExpirationTimeUtc = nil
	}

	// Filter
	if eventSubscriptionsSpec.Filter != nil {
		var filter v1alpha1api20200601storage.EventSubscriptionFilter
		err := (*eventSubscriptionsSpec.Filter).AssignPropertiesToEventSubscriptionFilter(&filter)
		if err != nil {
			return errors.Wrap(err, "populating Filter from Filter, calling AssignPropertiesToEventSubscriptionFilter()")
		}
		destination.Filter = &filter
	} else {
		destination.Filter = nil
	}

	// Labels
	destination.Labels = genruntime.CloneSliceOfString(eventSubscriptionsSpec.Labels)

	// Location
	destination.Location = genruntime.ClonePointerToString(eventSubscriptionsSpec.Location)

	// OriginalVersion
	destination.OriginalVersion = eventSubscriptionsSpec.OriginalVersion()

	// Owner
	destination.Owner = eventSubscriptionsSpec.Owner.Copy()

	// RetryPolicy
	if eventSubscriptionsSpec.RetryPolicy != nil {
		var retryPolicy v1alpha1api20200601storage.RetryPolicy
		err := (*eventSubscriptionsSpec.RetryPolicy).AssignPropertiesToRetryPolicy(&retryPolicy)
		if err != nil {
			return errors.Wrap(err, "populating RetryPolicy from RetryPolicy, calling AssignPropertiesToRetryPolicy()")
		}
		destination.RetryPolicy = &retryPolicy
	} else {
		destination.RetryPolicy = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(eventSubscriptionsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (eventSubscriptionsSpec *EventSubscriptions_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (eventSubscriptionsSpec *EventSubscriptions_Spec) SetAzureName(azureName string) {
	eventSubscriptionsSpec.AzureName = azureName
}

//Generated from:
type DeadLetterDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the dead letter destination
	EndpointType DeadLetterDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &DeadLetterDestination_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (deadLetterDestinationStatus *DeadLetterDestination_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeadLetterDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (deadLetterDestinationStatus *DeadLetterDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeadLetterDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeadLetterDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	deadLetterDestinationStatus.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromDeadLetterDestinationStatus populates our DeadLetterDestination_Status from the provided source DeadLetterDestination_Status
func (deadLetterDestinationStatus *DeadLetterDestination_Status) AssignPropertiesFromDeadLetterDestinationStatus(source *v1alpha1api20200601storage.DeadLetterDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		deadLetterDestinationStatus.EndpointType = DeadLetterDestinationStatusEndpointType(*source.EndpointType)
	} else {
		deadLetterDestinationStatus.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToDeadLetterDestinationStatus populates the provided destination DeadLetterDestination_Status from our DeadLetterDestination_Status
func (deadLetterDestinationStatus *DeadLetterDestination_Status) AssignPropertiesToDeadLetterDestinationStatus(destination *v1alpha1api20200601storage.DeadLetterDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(deadLetterDestinationStatus.EndpointType)
	destination.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventSubscriptionDestination
type EventSubscriptionDestination struct {
	//AzureFunctionEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	AzureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination `json:"azureFunctionEventSubscriptionDestination,omitempty"`

	//EventHubEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	EventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination `json:"eventHubEventSubscriptionDestination,omitempty"`

	//HybridConnectionEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	HybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination `json:"hybridConnectionEventSubscriptionDestination,omitempty"`

	//ServiceBusQueueEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	ServiceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination `json:"serviceBusQueueEventSubscriptionDestination,omitempty"`

	//ServiceBusTopicEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	ServiceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination `json:"serviceBusTopicEventSubscriptionDestination,omitempty"`

	//StorageQueueEventSubscriptionDestination: Mutually exclusive with all other
	//properties
	StorageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination `json:"storageQueueEventSubscriptionDestination,omitempty"`

	//WebHookEventSubscriptionDestination: Mutually exclusive with all other properties
	WebHookEventSubscriptionDestination *WebHookEventSubscriptionDestination `json:"webHookEventSubscriptionDestination,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionDestination *EventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionDestination == nil {
		return nil, nil
	}
	var result EventSubscriptionDestinationARM

	// Set property ‘AzureFunctionEventSubscriptionDestination’:
	if eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination != nil {
		azureFunctionEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		azureFunctionEventSubscriptionDestination := azureFunctionEventSubscriptionDestinationARM.(AzureFunctionEventSubscriptionDestinationARM)
		result.AzureFunctionEventSubscriptionDestination = &azureFunctionEventSubscriptionDestination
	}

	// Set property ‘EventHubEventSubscriptionDestination’:
	if eventSubscriptionDestination.EventHubEventSubscriptionDestination != nil {
		eventHubEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.EventHubEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		eventHubEventSubscriptionDestination := eventHubEventSubscriptionDestinationARM.(EventHubEventSubscriptionDestinationARM)
		result.EventHubEventSubscriptionDestination = &eventHubEventSubscriptionDestination
	}

	// Set property ‘HybridConnectionEventSubscriptionDestination’:
	if eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination != nil {
		hybridConnectionEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hybridConnectionEventSubscriptionDestination := hybridConnectionEventSubscriptionDestinationARM.(HybridConnectionEventSubscriptionDestinationARM)
		result.HybridConnectionEventSubscriptionDestination = &hybridConnectionEventSubscriptionDestination
	}

	// Set property ‘ServiceBusQueueEventSubscriptionDestination’:
	if eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination != nil {
		serviceBusQueueEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusQueueEventSubscriptionDestination := serviceBusQueueEventSubscriptionDestinationARM.(ServiceBusQueueEventSubscriptionDestinationARM)
		result.ServiceBusQueueEventSubscriptionDestination = &serviceBusQueueEventSubscriptionDestination
	}

	// Set property ‘ServiceBusTopicEventSubscriptionDestination’:
	if eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination != nil {
		serviceBusTopicEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		serviceBusTopicEventSubscriptionDestination := serviceBusTopicEventSubscriptionDestinationARM.(ServiceBusTopicEventSubscriptionDestinationARM)
		result.ServiceBusTopicEventSubscriptionDestination = &serviceBusTopicEventSubscriptionDestination
	}

	// Set property ‘StorageQueueEventSubscriptionDestination’:
	if eventSubscriptionDestination.StorageQueueEventSubscriptionDestination != nil {
		storageQueueEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.StorageQueueEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storageQueueEventSubscriptionDestination := storageQueueEventSubscriptionDestinationARM.(StorageQueueEventSubscriptionDestinationARM)
		result.StorageQueueEventSubscriptionDestination = &storageQueueEventSubscriptionDestination
	}

	// Set property ‘WebHookEventSubscriptionDestination’:
	if eventSubscriptionDestination.WebHookEventSubscriptionDestination != nil {
		webHookEventSubscriptionDestinationARM, err := (*eventSubscriptionDestination.WebHookEventSubscriptionDestination).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		webHookEventSubscriptionDestination := webHookEventSubscriptionDestinationARM.(WebHookEventSubscriptionDestinationARM)
		result.WebHookEventSubscriptionDestination = &webHookEventSubscriptionDestination
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionDestination *EventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionDestination *EventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘AzureFunctionEventSubscriptionDestination’:
	if typedInput.AzureFunctionEventSubscriptionDestination != nil {
		var azureFunctionEventSubscriptionDestination1 AzureFunctionEventSubscriptionDestination
		err := azureFunctionEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.AzureFunctionEventSubscriptionDestination)
		if err != nil {
			return err
		}
		azureFunctionEventSubscriptionDestination := azureFunctionEventSubscriptionDestination1
		eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination = &azureFunctionEventSubscriptionDestination
	}

	// Set property ‘EventHubEventSubscriptionDestination’:
	if typedInput.EventHubEventSubscriptionDestination != nil {
		var eventHubEventSubscriptionDestination1 EventHubEventSubscriptionDestination
		err := eventHubEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.EventHubEventSubscriptionDestination)
		if err != nil {
			return err
		}
		eventHubEventSubscriptionDestination := eventHubEventSubscriptionDestination1
		eventSubscriptionDestination.EventHubEventSubscriptionDestination = &eventHubEventSubscriptionDestination
	}

	// Set property ‘HybridConnectionEventSubscriptionDestination’:
	if typedInput.HybridConnectionEventSubscriptionDestination != nil {
		var hybridConnectionEventSubscriptionDestination1 HybridConnectionEventSubscriptionDestination
		err := hybridConnectionEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.HybridConnectionEventSubscriptionDestination)
		if err != nil {
			return err
		}
		hybridConnectionEventSubscriptionDestination := hybridConnectionEventSubscriptionDestination1
		eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination = &hybridConnectionEventSubscriptionDestination
	}

	// Set property ‘ServiceBusQueueEventSubscriptionDestination’:
	if typedInput.ServiceBusQueueEventSubscriptionDestination != nil {
		var serviceBusQueueEventSubscriptionDestination1 ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueueEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.ServiceBusQueueEventSubscriptionDestination)
		if err != nil {
			return err
		}
		serviceBusQueueEventSubscriptionDestination := serviceBusQueueEventSubscriptionDestination1
		eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination = &serviceBusQueueEventSubscriptionDestination
	}

	// Set property ‘ServiceBusTopicEventSubscriptionDestination’:
	if typedInput.ServiceBusTopicEventSubscriptionDestination != nil {
		var serviceBusTopicEventSubscriptionDestination1 ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopicEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.ServiceBusTopicEventSubscriptionDestination)
		if err != nil {
			return err
		}
		serviceBusTopicEventSubscriptionDestination := serviceBusTopicEventSubscriptionDestination1
		eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination = &serviceBusTopicEventSubscriptionDestination
	}

	// Set property ‘StorageQueueEventSubscriptionDestination’:
	if typedInput.StorageQueueEventSubscriptionDestination != nil {
		var storageQueueEventSubscriptionDestination1 StorageQueueEventSubscriptionDestination
		err := storageQueueEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.StorageQueueEventSubscriptionDestination)
		if err != nil {
			return err
		}
		storageQueueEventSubscriptionDestination := storageQueueEventSubscriptionDestination1
		eventSubscriptionDestination.StorageQueueEventSubscriptionDestination = &storageQueueEventSubscriptionDestination
	}

	// Set property ‘WebHookEventSubscriptionDestination’:
	if typedInput.WebHookEventSubscriptionDestination != nil {
		var webHookEventSubscriptionDestination1 WebHookEventSubscriptionDestination
		err := webHookEventSubscriptionDestination1.PopulateFromARM(owner, *typedInput.WebHookEventSubscriptionDestination)
		if err != nil {
			return err
		}
		webHookEventSubscriptionDestination := webHookEventSubscriptionDestination1
		eventSubscriptionDestination.WebHookEventSubscriptionDestination = &webHookEventSubscriptionDestination
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestination populates our EventSubscriptionDestination from the provided source EventSubscriptionDestination
func (eventSubscriptionDestination *EventSubscriptionDestination) AssignPropertiesFromEventSubscriptionDestination(source *v1alpha1api20200601storage.EventSubscriptionDestination) error {

	// AzureFunctionEventSubscriptionDestination
	if source.AzureFunctionEventSubscriptionDestination != nil {
		var azureFunctionEventSubscriptionDestination AzureFunctionEventSubscriptionDestination
		err := azureFunctionEventSubscriptionDestination.AssignPropertiesFromAzureFunctionEventSubscriptionDestination(source.AzureFunctionEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating AzureFunctionEventSubscriptionDestination from AzureFunctionEventSubscriptionDestination, calling AssignPropertiesFromAzureFunctionEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination = &azureFunctionEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination = nil
	}

	// EventHubEventSubscriptionDestination
	if source.EventHubEventSubscriptionDestination != nil {
		var eventHubEventSubscriptionDestination EventHubEventSubscriptionDestination
		err := eventHubEventSubscriptionDestination.AssignPropertiesFromEventHubEventSubscriptionDestination(source.EventHubEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating EventHubEventSubscriptionDestination from EventHubEventSubscriptionDestination, calling AssignPropertiesFromEventHubEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.EventHubEventSubscriptionDestination = &eventHubEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.EventHubEventSubscriptionDestination = nil
	}

	// HybridConnectionEventSubscriptionDestination
	if source.HybridConnectionEventSubscriptionDestination != nil {
		var hybridConnectionEventSubscriptionDestination HybridConnectionEventSubscriptionDestination
		err := hybridConnectionEventSubscriptionDestination.AssignPropertiesFromHybridConnectionEventSubscriptionDestination(source.HybridConnectionEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating HybridConnectionEventSubscriptionDestination from HybridConnectionEventSubscriptionDestination, calling AssignPropertiesFromHybridConnectionEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination = &hybridConnectionEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination = nil
	}

	// ServiceBusQueueEventSubscriptionDestination
	if source.ServiceBusQueueEventSubscriptionDestination != nil {
		var serviceBusQueueEventSubscriptionDestination ServiceBusQueueEventSubscriptionDestination
		err := serviceBusQueueEventSubscriptionDestination.AssignPropertiesFromServiceBusQueueEventSubscriptionDestination(source.ServiceBusQueueEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating ServiceBusQueueEventSubscriptionDestination from ServiceBusQueueEventSubscriptionDestination, calling AssignPropertiesFromServiceBusQueueEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination = &serviceBusQueueEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination = nil
	}

	// ServiceBusTopicEventSubscriptionDestination
	if source.ServiceBusTopicEventSubscriptionDestination != nil {
		var serviceBusTopicEventSubscriptionDestination ServiceBusTopicEventSubscriptionDestination
		err := serviceBusTopicEventSubscriptionDestination.AssignPropertiesFromServiceBusTopicEventSubscriptionDestination(source.ServiceBusTopicEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating ServiceBusTopicEventSubscriptionDestination from ServiceBusTopicEventSubscriptionDestination, calling AssignPropertiesFromServiceBusTopicEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination = &serviceBusTopicEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination = nil
	}

	// StorageQueueEventSubscriptionDestination
	if source.StorageQueueEventSubscriptionDestination != nil {
		var storageQueueEventSubscriptionDestination StorageQueueEventSubscriptionDestination
		err := storageQueueEventSubscriptionDestination.AssignPropertiesFromStorageQueueEventSubscriptionDestination(source.StorageQueueEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating StorageQueueEventSubscriptionDestination from StorageQueueEventSubscriptionDestination, calling AssignPropertiesFromStorageQueueEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.StorageQueueEventSubscriptionDestination = &storageQueueEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.StorageQueueEventSubscriptionDestination = nil
	}

	// WebHookEventSubscriptionDestination
	if source.WebHookEventSubscriptionDestination != nil {
		var webHookEventSubscriptionDestination WebHookEventSubscriptionDestination
		err := webHookEventSubscriptionDestination.AssignPropertiesFromWebHookEventSubscriptionDestination(source.WebHookEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating WebHookEventSubscriptionDestination from WebHookEventSubscriptionDestination, calling AssignPropertiesFromWebHookEventSubscriptionDestination()")
		}
		eventSubscriptionDestination.WebHookEventSubscriptionDestination = &webHookEventSubscriptionDestination
	} else {
		eventSubscriptionDestination.WebHookEventSubscriptionDestination = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestination populates the provided destination EventSubscriptionDestination from our EventSubscriptionDestination
func (eventSubscriptionDestination *EventSubscriptionDestination) AssignPropertiesToEventSubscriptionDestination(destination *v1alpha1api20200601storage.EventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureFunctionEventSubscriptionDestination
	if eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination != nil {
		var azureFunctionEventSubscriptionDestination v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination
		err := (*eventSubscriptionDestination.AzureFunctionEventSubscriptionDestination).AssignPropertiesToAzureFunctionEventSubscriptionDestination(&azureFunctionEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating AzureFunctionEventSubscriptionDestination from AzureFunctionEventSubscriptionDestination, calling AssignPropertiesToAzureFunctionEventSubscriptionDestination()")
		}
		destination.AzureFunctionEventSubscriptionDestination = &azureFunctionEventSubscriptionDestination
	} else {
		destination.AzureFunctionEventSubscriptionDestination = nil
	}

	// EventHubEventSubscriptionDestination
	if eventSubscriptionDestination.EventHubEventSubscriptionDestination != nil {
		var eventHubEventSubscriptionDestination v1alpha1api20200601storage.EventHubEventSubscriptionDestination
		err := (*eventSubscriptionDestination.EventHubEventSubscriptionDestination).AssignPropertiesToEventHubEventSubscriptionDestination(&eventHubEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating EventHubEventSubscriptionDestination from EventHubEventSubscriptionDestination, calling AssignPropertiesToEventHubEventSubscriptionDestination()")
		}
		destination.EventHubEventSubscriptionDestination = &eventHubEventSubscriptionDestination
	} else {
		destination.EventHubEventSubscriptionDestination = nil
	}

	// HybridConnectionEventSubscriptionDestination
	if eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination != nil {
		var hybridConnectionEventSubscriptionDestination v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination
		err := (*eventSubscriptionDestination.HybridConnectionEventSubscriptionDestination).AssignPropertiesToHybridConnectionEventSubscriptionDestination(&hybridConnectionEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating HybridConnectionEventSubscriptionDestination from HybridConnectionEventSubscriptionDestination, calling AssignPropertiesToHybridConnectionEventSubscriptionDestination()")
		}
		destination.HybridConnectionEventSubscriptionDestination = &hybridConnectionEventSubscriptionDestination
	} else {
		destination.HybridConnectionEventSubscriptionDestination = nil
	}

	// ServiceBusQueueEventSubscriptionDestination
	if eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination != nil {
		var serviceBusQueueEventSubscriptionDestination v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination
		err := (*eventSubscriptionDestination.ServiceBusQueueEventSubscriptionDestination).AssignPropertiesToServiceBusQueueEventSubscriptionDestination(&serviceBusQueueEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating ServiceBusQueueEventSubscriptionDestination from ServiceBusQueueEventSubscriptionDestination, calling AssignPropertiesToServiceBusQueueEventSubscriptionDestination()")
		}
		destination.ServiceBusQueueEventSubscriptionDestination = &serviceBusQueueEventSubscriptionDestination
	} else {
		destination.ServiceBusQueueEventSubscriptionDestination = nil
	}

	// ServiceBusTopicEventSubscriptionDestination
	if eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination != nil {
		var serviceBusTopicEventSubscriptionDestination v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination
		err := (*eventSubscriptionDestination.ServiceBusTopicEventSubscriptionDestination).AssignPropertiesToServiceBusTopicEventSubscriptionDestination(&serviceBusTopicEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating ServiceBusTopicEventSubscriptionDestination from ServiceBusTopicEventSubscriptionDestination, calling AssignPropertiesToServiceBusTopicEventSubscriptionDestination()")
		}
		destination.ServiceBusTopicEventSubscriptionDestination = &serviceBusTopicEventSubscriptionDestination
	} else {
		destination.ServiceBusTopicEventSubscriptionDestination = nil
	}

	// StorageQueueEventSubscriptionDestination
	if eventSubscriptionDestination.StorageQueueEventSubscriptionDestination != nil {
		var storageQueueEventSubscriptionDestination v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination
		err := (*eventSubscriptionDestination.StorageQueueEventSubscriptionDestination).AssignPropertiesToStorageQueueEventSubscriptionDestination(&storageQueueEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating StorageQueueEventSubscriptionDestination from StorageQueueEventSubscriptionDestination, calling AssignPropertiesToStorageQueueEventSubscriptionDestination()")
		}
		destination.StorageQueueEventSubscriptionDestination = &storageQueueEventSubscriptionDestination
	} else {
		destination.StorageQueueEventSubscriptionDestination = nil
	}

	// WebHookEventSubscriptionDestination
	if eventSubscriptionDestination.WebHookEventSubscriptionDestination != nil {
		var webHookEventSubscriptionDestination v1alpha1api20200601storage.WebHookEventSubscriptionDestination
		err := (*eventSubscriptionDestination.WebHookEventSubscriptionDestination).AssignPropertiesToWebHookEventSubscriptionDestination(&webHookEventSubscriptionDestination)
		if err != nil {
			return errors.Wrap(err, "populating WebHookEventSubscriptionDestination from WebHookEventSubscriptionDestination, calling AssignPropertiesToWebHookEventSubscriptionDestination()")
		}
		destination.WebHookEventSubscriptionDestination = &webHookEventSubscriptionDestination
	} else {
		destination.WebHookEventSubscriptionDestination = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type EventSubscriptionDestination_Status struct {
	// +kubebuilder:validation:Required
	//EndpointType: Type of the endpoint for the event subscription destination.
	EndpointType EventSubscriptionDestinationStatusEndpointType `json:"endpointType"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionDestination_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionDestination_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionDestination_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionDestination_StatusARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	eventSubscriptionDestinationStatus.EndpointType = typedInput.EndpointType

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionDestinationStatus populates our EventSubscriptionDestination_Status from the provided source EventSubscriptionDestination_Status
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) AssignPropertiesFromEventSubscriptionDestinationStatus(source *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {

	// EndpointType
	if source.EndpointType != nil {
		eventSubscriptionDestinationStatus.EndpointType = EventSubscriptionDestinationStatusEndpointType(*source.EndpointType)
	} else {
		eventSubscriptionDestinationStatus.EndpointType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionDestinationStatus populates the provided destination EventSubscriptionDestination_Status from our EventSubscriptionDestination_Status
func (eventSubscriptionDestinationStatus *EventSubscriptionDestination_Status) AssignPropertiesToEventSubscriptionDestinationStatus(destination *v1alpha1api20200601storage.EventSubscriptionDestination_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(eventSubscriptionDestinationStatus.EndpointType)
	destination.EndpointType = &endpointType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventSubscriptionFilter
type EventSubscriptionFilter struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.ARMTransformer = &EventSubscriptionFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventSubscriptionFilter *EventSubscriptionFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventSubscriptionFilter == nil {
		return nil, nil
	}
	var result EventSubscriptionFilterARM

	// Set property ‘AdvancedFilters’:
	for _, item := range eventSubscriptionFilter.AdvancedFilters {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.AdvancedFilters = append(result.AdvancedFilters, itemARM.(AdvancedFilterARM))
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range eventSubscriptionFilter.IncludedEventTypes {
		result.IncludedEventTypes = append(result.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if eventSubscriptionFilter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilter.IsSubjectCaseSensitive
		result.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if eventSubscriptionFilter.SubjectBeginsWith != nil {
		subjectBeginsWith := *eventSubscriptionFilter.SubjectBeginsWith
		result.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if eventSubscriptionFilter.SubjectEndsWith != nil {
		subjectEndsWith := *eventSubscriptionFilter.SubjectEndsWith
		result.SubjectEndsWith = &subjectEndsWith
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionFilter *EventSubscriptionFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionFilter *EventSubscriptionFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilterARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		eventSubscriptionFilter.AdvancedFilters = append(eventSubscriptionFilter.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		eventSubscriptionFilter.IncludedEventTypes = append(eventSubscriptionFilter.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		eventSubscriptionFilter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		eventSubscriptionFilter.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		eventSubscriptionFilter.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilter populates our EventSubscriptionFilter from the provided source EventSubscriptionFilter
func (eventSubscriptionFilter *EventSubscriptionFilter) AssignPropertiesFromEventSubscriptionFilter(source *v1alpha1api20200601storage.EventSubscriptionFilter) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter
			err := advancedFilter.AssignPropertiesFromAdvancedFilter(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "populating AdvancedFilters from AdvancedFilters, calling AssignPropertiesFromAdvancedFilter()")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		eventSubscriptionFilter.AdvancedFilters = advancedFilterList
	} else {
		eventSubscriptionFilter.AdvancedFilters = nil
	}

	// IncludedEventTypes
	eventSubscriptionFilter.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		eventSubscriptionFilter.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		eventSubscriptionFilter.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	eventSubscriptionFilter.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	eventSubscriptionFilter.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilter populates the provided destination EventSubscriptionFilter from our EventSubscriptionFilter
func (eventSubscriptionFilter *EventSubscriptionFilter) AssignPropertiesToEventSubscriptionFilter(destination *v1alpha1api20200601storage.EventSubscriptionFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if eventSubscriptionFilter.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter, len(eventSubscriptionFilter.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range eventSubscriptionFilter.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter
			err := advancedFilterItem.AssignPropertiesToAdvancedFilter(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "populating AdvancedFilters from AdvancedFilters, calling AssignPropertiesToAdvancedFilter()")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(eventSubscriptionFilter.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if eventSubscriptionFilter.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilter.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(eventSubscriptionFilter.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(eventSubscriptionFilter.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type EventSubscriptionFilter_Status struct {
	//AdvancedFilters: An array of advanced filters that are used for filtering event
	//subscriptions.
	AdvancedFilters []AdvancedFilter_Status `json:"advancedFilters,omitempty"`

	//IncludedEventTypes: A list of applicable event types that need to be part of the
	//event subscription. If it is desired to subscribe to all default event types,
	//set the IncludedEventTypes to null.
	IncludedEventTypes []string `json:"includedEventTypes,omitempty"`

	//IsSubjectCaseSensitive: Specifies if the SubjectBeginsWith and SubjectEndsWith
	//properties of the filter
	//should be compared in a case sensitive manner.
	IsSubjectCaseSensitive *bool `json:"isSubjectCaseSensitive,omitempty"`

	//SubjectBeginsWith: An optional string to filter events for an event subscription
	//based on a resource path prefix.
	//The format of this depends on the publisher of the events.
	//Wildcard characters are not supported in this path.
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty"`

	//SubjectEndsWith: An optional string to filter events for an event subscription
	//based on a resource path suffix.
	//Wildcard characters are not supported in this path.
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty"`
}

var _ genruntime.FromARMConverter = &EventSubscriptionFilter_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventSubscriptionFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventSubscriptionFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventSubscriptionFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘AdvancedFilters’:
	for _, item := range typedInput.AdvancedFilters {
		var item1 AdvancedFilter_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		eventSubscriptionFilterStatus.AdvancedFilters = append(eventSubscriptionFilterStatus.AdvancedFilters, item1)
	}

	// Set property ‘IncludedEventTypes’:
	for _, item := range typedInput.IncludedEventTypes {
		eventSubscriptionFilterStatus.IncludedEventTypes = append(eventSubscriptionFilterStatus.IncludedEventTypes, item)
	}

	// Set property ‘IsSubjectCaseSensitive’:
	if typedInput.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *typedInput.IsSubjectCaseSensitive
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	}

	// Set property ‘SubjectBeginsWith’:
	if typedInput.SubjectBeginsWith != nil {
		subjectBeginsWith := *typedInput.SubjectBeginsWith
		eventSubscriptionFilterStatus.SubjectBeginsWith = &subjectBeginsWith
	}

	// Set property ‘SubjectEndsWith’:
	if typedInput.SubjectEndsWith != nil {
		subjectEndsWith := *typedInput.SubjectEndsWith
		eventSubscriptionFilterStatus.SubjectEndsWith = &subjectEndsWith
	}

	// No error
	return nil
}

// AssignPropertiesFromEventSubscriptionFilterStatus populates our EventSubscriptionFilter_Status from the provided source EventSubscriptionFilter_Status
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) AssignPropertiesFromEventSubscriptionFilterStatus(source *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {

	// AdvancedFilters
	if source.AdvancedFilters != nil {
		advancedFilterList := make([]AdvancedFilter_Status, len(source.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range source.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter AdvancedFilter_Status
			err := advancedFilter.AssignPropertiesFromAdvancedFilterStatus(&advancedFilterItem)
			if err != nil {
				return errors.Wrap(err, "populating AdvancedFilters from AdvancedFilters, calling AssignPropertiesFromAdvancedFilterStatus()")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		eventSubscriptionFilterStatus.AdvancedFilters = advancedFilterList
	} else {
		eventSubscriptionFilterStatus.AdvancedFilters = nil
	}

	// IncludedEventTypes
	eventSubscriptionFilterStatus.IncludedEventTypes = genruntime.CloneSliceOfString(source.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if source.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *source.IsSubjectCaseSensitive
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		eventSubscriptionFilterStatus.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	eventSubscriptionFilterStatus.SubjectBeginsWith = genruntime.ClonePointerToString(source.SubjectBeginsWith)

	// SubjectEndsWith
	eventSubscriptionFilterStatus.SubjectEndsWith = genruntime.ClonePointerToString(source.SubjectEndsWith)

	// No error
	return nil
}

// AssignPropertiesToEventSubscriptionFilterStatus populates the provided destination EventSubscriptionFilter_Status from our EventSubscriptionFilter_Status
func (eventSubscriptionFilterStatus *EventSubscriptionFilter_Status) AssignPropertiesToEventSubscriptionFilterStatus(destination *v1alpha1api20200601storage.EventSubscriptionFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdvancedFilters
	if eventSubscriptionFilterStatus.AdvancedFilters != nil {
		advancedFilterList := make([]v1alpha1api20200601storage.AdvancedFilter_Status, len(eventSubscriptionFilterStatus.AdvancedFilters))
		for advancedFilterIndex, advancedFilterItem := range eventSubscriptionFilterStatus.AdvancedFilters {
			// Shadow the loop variable to avoid aliasing
			advancedFilterItem := advancedFilterItem
			var advancedFilter v1alpha1api20200601storage.AdvancedFilter_Status
			err := advancedFilterItem.AssignPropertiesToAdvancedFilterStatus(&advancedFilter)
			if err != nil {
				return errors.Wrap(err, "populating AdvancedFilters from AdvancedFilters, calling AssignPropertiesToAdvancedFilterStatus()")
			}
			advancedFilterList[advancedFilterIndex] = advancedFilter
		}
		destination.AdvancedFilters = advancedFilterList
	} else {
		destination.AdvancedFilters = nil
	}

	// IncludedEventTypes
	destination.IncludedEventTypes = genruntime.CloneSliceOfString(eventSubscriptionFilterStatus.IncludedEventTypes)

	// IsSubjectCaseSensitive
	if eventSubscriptionFilterStatus.IsSubjectCaseSensitive != nil {
		isSubjectCaseSensitive := *eventSubscriptionFilterStatus.IsSubjectCaseSensitive
		destination.IsSubjectCaseSensitive = &isSubjectCaseSensitive
	} else {
		destination.IsSubjectCaseSensitive = nil
	}

	// SubjectBeginsWith
	destination.SubjectBeginsWith = genruntime.ClonePointerToString(eventSubscriptionFilterStatus.SubjectBeginsWith)

	// SubjectEndsWith
	destination.SubjectEndsWith = genruntime.ClonePointerToString(eventSubscriptionFilterStatus.SubjectEndsWith)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"CloudEventSchemaV1_0","CustomInputSchema","EventGridSchema"}
type EventSubscriptionPropertiesEventDeliverySchema string

const (
	EventSubscriptionPropertiesEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusEventDeliverySchema string

const (
	EventSubscriptionPropertiesStatusEventDeliverySchemaCloudEventSchemaV10 = EventSubscriptionPropertiesStatusEventDeliverySchema("CloudEventSchemaV1_0")
	EventSubscriptionPropertiesStatusEventDeliverySchemaCustomInputSchema   = EventSubscriptionPropertiesStatusEventDeliverySchema("CustomInputSchema")
	EventSubscriptionPropertiesStatusEventDeliverySchemaEventGridSchema     = EventSubscriptionPropertiesStatusEventDeliverySchema("EventGridSchema")
)

type EventSubscriptionPropertiesStatusProvisioningState string

const (
	EventSubscriptionPropertiesStatusProvisioningStateAwaitingManualAction = EventSubscriptionPropertiesStatusProvisioningState("AwaitingManualAction")
	EventSubscriptionPropertiesStatusProvisioningStateCanceled             = EventSubscriptionPropertiesStatusProvisioningState("Canceled")
	EventSubscriptionPropertiesStatusProvisioningStateCreating             = EventSubscriptionPropertiesStatusProvisioningState("Creating")
	EventSubscriptionPropertiesStatusProvisioningStateDeleting             = EventSubscriptionPropertiesStatusProvisioningState("Deleting")
	EventSubscriptionPropertiesStatusProvisioningStateFailed               = EventSubscriptionPropertiesStatusProvisioningState("Failed")
	EventSubscriptionPropertiesStatusProvisioningStateSucceeded            = EventSubscriptionPropertiesStatusProvisioningState("Succeeded")
	EventSubscriptionPropertiesStatusProvisioningStateUpdating             = EventSubscriptionPropertiesStatusProvisioningState("Updating")
)

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/RetryPolicy
type RetryPolicy struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.ARMTransformer = &RetryPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (retryPolicy *RetryPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if retryPolicy == nil {
		return nil, nil
	}
	var result RetryPolicyARM

	// Set property ‘EventTimeToLiveInMinutes’:
	if retryPolicy.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *retryPolicy.EventTimeToLiveInMinutes
		result.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if retryPolicy.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *retryPolicy.MaxDeliveryAttempts
		result.MaxDeliveryAttempts = &maxDeliveryAttempts
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (retryPolicy *RetryPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (retryPolicy *RetryPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicyARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		retryPolicy.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		retryPolicy.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicy populates our RetryPolicy from the provided source RetryPolicy
func (retryPolicy *RetryPolicy) AssignPropertiesFromRetryPolicy(source *v1alpha1api20200601storage.RetryPolicy) error {

	// EventTimeToLiveInMinutes
	retryPolicy.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	retryPolicy.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicy populates the provided destination RetryPolicy from our RetryPolicy
func (retryPolicy *RetryPolicy) AssignPropertiesToRetryPolicy(destination *v1alpha1api20200601storage.RetryPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(retryPolicy.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(retryPolicy.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type RetryPolicy_Status struct {
	//EventTimeToLiveInMinutes: Time To Live (in minutes) for events.
	EventTimeToLiveInMinutes *int `json:"eventTimeToLiveInMinutes,omitempty"`

	//MaxDeliveryAttempts: Maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts *int `json:"maxDeliveryAttempts,omitempty"`
}

var _ genruntime.FromARMConverter = &RetryPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (retryPolicyStatus *RetryPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetryPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (retryPolicyStatus *RetryPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetryPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetryPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘EventTimeToLiveInMinutes’:
	if typedInput.EventTimeToLiveInMinutes != nil {
		eventTimeToLiveInMinutes := *typedInput.EventTimeToLiveInMinutes
		retryPolicyStatus.EventTimeToLiveInMinutes = &eventTimeToLiveInMinutes
	}

	// Set property ‘MaxDeliveryAttempts’:
	if typedInput.MaxDeliveryAttempts != nil {
		maxDeliveryAttempts := *typedInput.MaxDeliveryAttempts
		retryPolicyStatus.MaxDeliveryAttempts = &maxDeliveryAttempts
	}

	// No error
	return nil
}

// AssignPropertiesFromRetryPolicyStatus populates our RetryPolicy_Status from the provided source RetryPolicy_Status
func (retryPolicyStatus *RetryPolicy_Status) AssignPropertiesFromRetryPolicyStatus(source *v1alpha1api20200601storage.RetryPolicy_Status) error {

	// EventTimeToLiveInMinutes
	retryPolicyStatus.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(source.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	retryPolicyStatus.MaxDeliveryAttempts = genruntime.ClonePointerToInt(source.MaxDeliveryAttempts)

	// No error
	return nil
}

// AssignPropertiesToRetryPolicyStatus populates the provided destination RetryPolicy_Status from our RetryPolicy_Status
func (retryPolicyStatus *RetryPolicy_Status) AssignPropertiesToRetryPolicyStatus(destination *v1alpha1api20200601storage.RetryPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EventTimeToLiveInMinutes
	destination.EventTimeToLiveInMinutes = genruntime.ClonePointerToInt(retryPolicyStatus.EventTimeToLiveInMinutes)

	// MaxDeliveryAttempts
	destination.MaxDeliveryAttempts = genruntime.ClonePointerToInt(retryPolicyStatus.MaxDeliveryAttempts)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageBlobDeadLetterDestination
type StorageBlobDeadLetterDestination struct {
	// +kubebuilder:validation:Required
	EndpointType StorageBlobDeadLetterDestinationEndpointType `json:"endpointType"`

	//Properties: Properties of the storage blob based dead letter destination.
	Properties *StorageBlobDeadLetterDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageBlobDeadLetterDestination == nil {
		return nil, nil
	}
	var result StorageBlobDeadLetterDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = storageBlobDeadLetterDestination.EndpointType

	// Set property ‘Properties’:
	if storageBlobDeadLetterDestination.Properties != nil {
		propertiesARM, err := (*storageBlobDeadLetterDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(StorageBlobDeadLetterDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	storageBlobDeadLetterDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageBlobDeadLetterDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		storageBlobDeadLetterDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageBlobDeadLetterDestination populates our StorageBlobDeadLetterDestination from the provided source StorageBlobDeadLetterDestination
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) AssignPropertiesFromStorageBlobDeadLetterDestination(source *v1alpha1api20200601storage.StorageBlobDeadLetterDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		storageBlobDeadLetterDestination.EndpointType = StorageBlobDeadLetterDestinationEndpointType(*source.EndpointType)
	} else {
		storageBlobDeadLetterDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property StorageBlobDeadLetterDestinationProperties
		err := property.AssignPropertiesFromStorageBlobDeadLetterDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromStorageBlobDeadLetterDestinationProperties()")
		}
		storageBlobDeadLetterDestination.Properties = &property
	} else {
		storageBlobDeadLetterDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageBlobDeadLetterDestination populates the provided destination StorageBlobDeadLetterDestination from our StorageBlobDeadLetterDestination
func (storageBlobDeadLetterDestination *StorageBlobDeadLetterDestination) AssignPropertiesToStorageBlobDeadLetterDestination(destination *v1alpha1api20200601storage.StorageBlobDeadLetterDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(storageBlobDeadLetterDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if storageBlobDeadLetterDestination.Properties != nil {
		var property v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties
		err := (*storageBlobDeadLetterDestination.Properties).AssignPropertiesToStorageBlobDeadLetterDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToStorageBlobDeadLetterDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AdvancedFilter
type AdvancedFilter struct {
	//BoolEqualsAdvancedFilter: Mutually exclusive with all other properties
	BoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter `json:"boolEqualsAdvancedFilter,omitempty"`

	//NumberGreaterThanAdvancedFilter: Mutually exclusive with all other properties
	NumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter `json:"numberGreaterThanAdvancedFilter,omitempty"`

	//NumberGreaterThanOrEqualsAdvancedFilter: Mutually exclusive with all other
	//properties
	NumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter `json:"numberGreaterThanOrEqualsAdvancedFilter,omitempty"`

	//NumberInAdvancedFilter: Mutually exclusive with all other properties
	NumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter `json:"numberInAdvancedFilter,omitempty"`

	//NumberLessThanAdvancedFilter: Mutually exclusive with all other properties
	NumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter `json:"numberLessThanAdvancedFilter,omitempty"`

	//NumberLessThanOrEqualsAdvancedFilter: Mutually exclusive with all other
	//properties
	NumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter `json:"numberLessThanOrEqualsAdvancedFilter,omitempty"`

	//NumberNotInAdvancedFilter: Mutually exclusive with all other properties
	NumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter `json:"numberNotInAdvancedFilter,omitempty"`

	//StringBeginsWithAdvancedFilter: Mutually exclusive with all other properties
	StringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter `json:"stringBeginsWithAdvancedFilter,omitempty"`

	//StringContainsAdvancedFilter: Mutually exclusive with all other properties
	StringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter `json:"stringContainsAdvancedFilter,omitempty"`

	//StringEndsWithAdvancedFilter: Mutually exclusive with all other properties
	StringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter `json:"stringEndsWithAdvancedFilter,omitempty"`

	//StringInAdvancedFilter: Mutually exclusive with all other properties
	StringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter `json:"stringInAdvancedFilter,omitempty"`

	//StringNotInAdvancedFilter: Mutually exclusive with all other properties
	StringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter `json:"stringNotInAdvancedFilter,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilter *AdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilterARM

	// Set property ‘BoolEqualsAdvancedFilter’:
	if advancedFilter.BoolEqualsAdvancedFilter != nil {
		boolEqualsAdvancedFilterARM, err := (*advancedFilter.BoolEqualsAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		boolEqualsAdvancedFilter := boolEqualsAdvancedFilterARM.(AdvancedFilter_BoolEqualsAdvancedFilterARM)
		result.BoolEqualsAdvancedFilter = &boolEqualsAdvancedFilter
	}

	// Set property ‘NumberGreaterThanAdvancedFilter’:
	if advancedFilter.NumberGreaterThanAdvancedFilter != nil {
		numberGreaterThanAdvancedFilterARM, err := (*advancedFilter.NumberGreaterThanAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThanAdvancedFilter := numberGreaterThanAdvancedFilterARM.(AdvancedFilter_NumberGreaterThanAdvancedFilterARM)
		result.NumberGreaterThanAdvancedFilter = &numberGreaterThanAdvancedFilter
	}

	// Set property ‘NumberGreaterThanOrEqualsAdvancedFilter’:
	if advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter != nil {
		numberGreaterThanOrEqualsAdvancedFilterARM, err := (*advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberGreaterThanOrEqualsAdvancedFilter := numberGreaterThanOrEqualsAdvancedFilterARM.(AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM)
		result.NumberGreaterThanOrEqualsAdvancedFilter = &numberGreaterThanOrEqualsAdvancedFilter
	}

	// Set property ‘NumberInAdvancedFilter’:
	if advancedFilter.NumberInAdvancedFilter != nil {
		numberInAdvancedFilterARM, err := (*advancedFilter.NumberInAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberInAdvancedFilter := numberInAdvancedFilterARM.(AdvancedFilter_NumberInAdvancedFilterARM)
		result.NumberInAdvancedFilter = &numberInAdvancedFilter
	}

	// Set property ‘NumberLessThanAdvancedFilter’:
	if advancedFilter.NumberLessThanAdvancedFilter != nil {
		numberLessThanAdvancedFilterARM, err := (*advancedFilter.NumberLessThanAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThanAdvancedFilter := numberLessThanAdvancedFilterARM.(AdvancedFilter_NumberLessThanAdvancedFilterARM)
		result.NumberLessThanAdvancedFilter = &numberLessThanAdvancedFilter
	}

	// Set property ‘NumberLessThanOrEqualsAdvancedFilter’:
	if advancedFilter.NumberLessThanOrEqualsAdvancedFilter != nil {
		numberLessThanOrEqualsAdvancedFilterARM, err := (*advancedFilter.NumberLessThanOrEqualsAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberLessThanOrEqualsAdvancedFilter := numberLessThanOrEqualsAdvancedFilterARM.(AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM)
		result.NumberLessThanOrEqualsAdvancedFilter = &numberLessThanOrEqualsAdvancedFilter
	}

	// Set property ‘NumberNotInAdvancedFilter’:
	if advancedFilter.NumberNotInAdvancedFilter != nil {
		numberNotInAdvancedFilterARM, err := (*advancedFilter.NumberNotInAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		numberNotInAdvancedFilter := numberNotInAdvancedFilterARM.(AdvancedFilter_NumberNotInAdvancedFilterARM)
		result.NumberNotInAdvancedFilter = &numberNotInAdvancedFilter
	}

	// Set property ‘StringBeginsWithAdvancedFilter’:
	if advancedFilter.StringBeginsWithAdvancedFilter != nil {
		stringBeginsWithAdvancedFilterARM, err := (*advancedFilter.StringBeginsWithAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringBeginsWithAdvancedFilter := stringBeginsWithAdvancedFilterARM.(AdvancedFilter_StringBeginsWithAdvancedFilterARM)
		result.StringBeginsWithAdvancedFilter = &stringBeginsWithAdvancedFilter
	}

	// Set property ‘StringContainsAdvancedFilter’:
	if advancedFilter.StringContainsAdvancedFilter != nil {
		stringContainsAdvancedFilterARM, err := (*advancedFilter.StringContainsAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringContainsAdvancedFilter := stringContainsAdvancedFilterARM.(AdvancedFilter_StringContainsAdvancedFilterARM)
		result.StringContainsAdvancedFilter = &stringContainsAdvancedFilter
	}

	// Set property ‘StringEndsWithAdvancedFilter’:
	if advancedFilter.StringEndsWithAdvancedFilter != nil {
		stringEndsWithAdvancedFilterARM, err := (*advancedFilter.StringEndsWithAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringEndsWithAdvancedFilter := stringEndsWithAdvancedFilterARM.(AdvancedFilter_StringEndsWithAdvancedFilterARM)
		result.StringEndsWithAdvancedFilter = &stringEndsWithAdvancedFilter
	}

	// Set property ‘StringInAdvancedFilter’:
	if advancedFilter.StringInAdvancedFilter != nil {
		stringInAdvancedFilterARM, err := (*advancedFilter.StringInAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringInAdvancedFilter := stringInAdvancedFilterARM.(AdvancedFilter_StringInAdvancedFilterARM)
		result.StringInAdvancedFilter = &stringInAdvancedFilter
	}

	// Set property ‘StringNotInAdvancedFilter’:
	if advancedFilter.StringNotInAdvancedFilter != nil {
		stringNotInAdvancedFilterARM, err := (*advancedFilter.StringNotInAdvancedFilter).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		stringNotInAdvancedFilter := stringNotInAdvancedFilterARM.(AdvancedFilter_StringNotInAdvancedFilterARM)
		result.StringNotInAdvancedFilter = &stringNotInAdvancedFilter
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilter *AdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilter *AdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘BoolEqualsAdvancedFilter’:
	if typedInput.BoolEqualsAdvancedFilter != nil {
		var boolEqualsAdvancedFilter1 AdvancedFilter_BoolEqualsAdvancedFilter
		err := boolEqualsAdvancedFilter1.PopulateFromARM(owner, *typedInput.BoolEqualsAdvancedFilter)
		if err != nil {
			return err
		}
		boolEqualsAdvancedFilter := boolEqualsAdvancedFilter1
		advancedFilter.BoolEqualsAdvancedFilter = &boolEqualsAdvancedFilter
	}

	// Set property ‘NumberGreaterThanAdvancedFilter’:
	if typedInput.NumberGreaterThanAdvancedFilter != nil {
		var numberGreaterThanAdvancedFilter1 AdvancedFilter_NumberGreaterThanAdvancedFilter
		err := numberGreaterThanAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberGreaterThanAdvancedFilter)
		if err != nil {
			return err
		}
		numberGreaterThanAdvancedFilter := numberGreaterThanAdvancedFilter1
		advancedFilter.NumberGreaterThanAdvancedFilter = &numberGreaterThanAdvancedFilter
	}

	// Set property ‘NumberGreaterThanOrEqualsAdvancedFilter’:
	if typedInput.NumberGreaterThanOrEqualsAdvancedFilter != nil {
		var numberGreaterThanOrEqualsAdvancedFilter1 AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter
		err := numberGreaterThanOrEqualsAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberGreaterThanOrEqualsAdvancedFilter)
		if err != nil {
			return err
		}
		numberGreaterThanOrEqualsAdvancedFilter := numberGreaterThanOrEqualsAdvancedFilter1
		advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter = &numberGreaterThanOrEqualsAdvancedFilter
	}

	// Set property ‘NumberInAdvancedFilter’:
	if typedInput.NumberInAdvancedFilter != nil {
		var numberInAdvancedFilter1 AdvancedFilter_NumberInAdvancedFilter
		err := numberInAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberInAdvancedFilter)
		if err != nil {
			return err
		}
		numberInAdvancedFilter := numberInAdvancedFilter1
		advancedFilter.NumberInAdvancedFilter = &numberInAdvancedFilter
	}

	// Set property ‘NumberLessThanAdvancedFilter’:
	if typedInput.NumberLessThanAdvancedFilter != nil {
		var numberLessThanAdvancedFilter1 AdvancedFilter_NumberLessThanAdvancedFilter
		err := numberLessThanAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberLessThanAdvancedFilter)
		if err != nil {
			return err
		}
		numberLessThanAdvancedFilter := numberLessThanAdvancedFilter1
		advancedFilter.NumberLessThanAdvancedFilter = &numberLessThanAdvancedFilter
	}

	// Set property ‘NumberLessThanOrEqualsAdvancedFilter’:
	if typedInput.NumberLessThanOrEqualsAdvancedFilter != nil {
		var numberLessThanOrEqualsAdvancedFilter1 AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter
		err := numberLessThanOrEqualsAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberLessThanOrEqualsAdvancedFilter)
		if err != nil {
			return err
		}
		numberLessThanOrEqualsAdvancedFilter := numberLessThanOrEqualsAdvancedFilter1
		advancedFilter.NumberLessThanOrEqualsAdvancedFilter = &numberLessThanOrEqualsAdvancedFilter
	}

	// Set property ‘NumberNotInAdvancedFilter’:
	if typedInput.NumberNotInAdvancedFilter != nil {
		var numberNotInAdvancedFilter1 AdvancedFilter_NumberNotInAdvancedFilter
		err := numberNotInAdvancedFilter1.PopulateFromARM(owner, *typedInput.NumberNotInAdvancedFilter)
		if err != nil {
			return err
		}
		numberNotInAdvancedFilter := numberNotInAdvancedFilter1
		advancedFilter.NumberNotInAdvancedFilter = &numberNotInAdvancedFilter
	}

	// Set property ‘StringBeginsWithAdvancedFilter’:
	if typedInput.StringBeginsWithAdvancedFilter != nil {
		var stringBeginsWithAdvancedFilter1 AdvancedFilter_StringBeginsWithAdvancedFilter
		err := stringBeginsWithAdvancedFilter1.PopulateFromARM(owner, *typedInput.StringBeginsWithAdvancedFilter)
		if err != nil {
			return err
		}
		stringBeginsWithAdvancedFilter := stringBeginsWithAdvancedFilter1
		advancedFilter.StringBeginsWithAdvancedFilter = &stringBeginsWithAdvancedFilter
	}

	// Set property ‘StringContainsAdvancedFilter’:
	if typedInput.StringContainsAdvancedFilter != nil {
		var stringContainsAdvancedFilter1 AdvancedFilter_StringContainsAdvancedFilter
		err := stringContainsAdvancedFilter1.PopulateFromARM(owner, *typedInput.StringContainsAdvancedFilter)
		if err != nil {
			return err
		}
		stringContainsAdvancedFilter := stringContainsAdvancedFilter1
		advancedFilter.StringContainsAdvancedFilter = &stringContainsAdvancedFilter
	}

	// Set property ‘StringEndsWithAdvancedFilter’:
	if typedInput.StringEndsWithAdvancedFilter != nil {
		var stringEndsWithAdvancedFilter1 AdvancedFilter_StringEndsWithAdvancedFilter
		err := stringEndsWithAdvancedFilter1.PopulateFromARM(owner, *typedInput.StringEndsWithAdvancedFilter)
		if err != nil {
			return err
		}
		stringEndsWithAdvancedFilter := stringEndsWithAdvancedFilter1
		advancedFilter.StringEndsWithAdvancedFilter = &stringEndsWithAdvancedFilter
	}

	// Set property ‘StringInAdvancedFilter’:
	if typedInput.StringInAdvancedFilter != nil {
		var stringInAdvancedFilter1 AdvancedFilter_StringInAdvancedFilter
		err := stringInAdvancedFilter1.PopulateFromARM(owner, *typedInput.StringInAdvancedFilter)
		if err != nil {
			return err
		}
		stringInAdvancedFilter := stringInAdvancedFilter1
		advancedFilter.StringInAdvancedFilter = &stringInAdvancedFilter
	}

	// Set property ‘StringNotInAdvancedFilter’:
	if typedInput.StringNotInAdvancedFilter != nil {
		var stringNotInAdvancedFilter1 AdvancedFilter_StringNotInAdvancedFilter
		err := stringNotInAdvancedFilter1.PopulateFromARM(owner, *typedInput.StringNotInAdvancedFilter)
		if err != nil {
			return err
		}
		stringNotInAdvancedFilter := stringNotInAdvancedFilter1
		advancedFilter.StringNotInAdvancedFilter = &stringNotInAdvancedFilter
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilter populates our AdvancedFilter from the provided source AdvancedFilter
func (advancedFilter *AdvancedFilter) AssignPropertiesFromAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter) error {

	// BoolEqualsAdvancedFilter
	if source.BoolEqualsAdvancedFilter != nil {
		var boolEqualsAdvancedFilter AdvancedFilter_BoolEqualsAdvancedFilter
		err := boolEqualsAdvancedFilter.AssignPropertiesFromAdvancedFilterBoolEqualsAdvancedFilter(source.BoolEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating BoolEqualsAdvancedFilter from BoolEqualsAdvancedFilter, calling AssignPropertiesFromAdvancedFilterBoolEqualsAdvancedFilter()")
		}
		advancedFilter.BoolEqualsAdvancedFilter = &boolEqualsAdvancedFilter
	} else {
		advancedFilter.BoolEqualsAdvancedFilter = nil
	}

	// NumberGreaterThanAdvancedFilter
	if source.NumberGreaterThanAdvancedFilter != nil {
		var numberGreaterThanAdvancedFilter AdvancedFilter_NumberGreaterThanAdvancedFilter
		err := numberGreaterThanAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberGreaterThanAdvancedFilter(source.NumberGreaterThanAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberGreaterThanAdvancedFilter from NumberGreaterThanAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberGreaterThanAdvancedFilter()")
		}
		advancedFilter.NumberGreaterThanAdvancedFilter = &numberGreaterThanAdvancedFilter
	} else {
		advancedFilter.NumberGreaterThanAdvancedFilter = nil
	}

	// NumberGreaterThanOrEqualsAdvancedFilter
	if source.NumberGreaterThanOrEqualsAdvancedFilter != nil {
		var numberGreaterThanOrEqualsAdvancedFilter AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter
		err := numberGreaterThanOrEqualsAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter(source.NumberGreaterThanOrEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberGreaterThanOrEqualsAdvancedFilter from NumberGreaterThanOrEqualsAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter()")
		}
		advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter = &numberGreaterThanOrEqualsAdvancedFilter
	} else {
		advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter = nil
	}

	// NumberInAdvancedFilter
	if source.NumberInAdvancedFilter != nil {
		var numberInAdvancedFilter AdvancedFilter_NumberInAdvancedFilter
		err := numberInAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberInAdvancedFilter(source.NumberInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberInAdvancedFilter from NumberInAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberInAdvancedFilter()")
		}
		advancedFilter.NumberInAdvancedFilter = &numberInAdvancedFilter
	} else {
		advancedFilter.NumberInAdvancedFilter = nil
	}

	// NumberLessThanAdvancedFilter
	if source.NumberLessThanAdvancedFilter != nil {
		var numberLessThanAdvancedFilter AdvancedFilter_NumberLessThanAdvancedFilter
		err := numberLessThanAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberLessThanAdvancedFilter(source.NumberLessThanAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberLessThanAdvancedFilter from NumberLessThanAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberLessThanAdvancedFilter()")
		}
		advancedFilter.NumberLessThanAdvancedFilter = &numberLessThanAdvancedFilter
	} else {
		advancedFilter.NumberLessThanAdvancedFilter = nil
	}

	// NumberLessThanOrEqualsAdvancedFilter
	if source.NumberLessThanOrEqualsAdvancedFilter != nil {
		var numberLessThanOrEqualsAdvancedFilter AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter
		err := numberLessThanOrEqualsAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberLessThanOrEqualsAdvancedFilter(source.NumberLessThanOrEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberLessThanOrEqualsAdvancedFilter from NumberLessThanOrEqualsAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberLessThanOrEqualsAdvancedFilter()")
		}
		advancedFilter.NumberLessThanOrEqualsAdvancedFilter = &numberLessThanOrEqualsAdvancedFilter
	} else {
		advancedFilter.NumberLessThanOrEqualsAdvancedFilter = nil
	}

	// NumberNotInAdvancedFilter
	if source.NumberNotInAdvancedFilter != nil {
		var numberNotInAdvancedFilter AdvancedFilter_NumberNotInAdvancedFilter
		err := numberNotInAdvancedFilter.AssignPropertiesFromAdvancedFilterNumberNotInAdvancedFilter(source.NumberNotInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberNotInAdvancedFilter from NumberNotInAdvancedFilter, calling AssignPropertiesFromAdvancedFilterNumberNotInAdvancedFilter()")
		}
		advancedFilter.NumberNotInAdvancedFilter = &numberNotInAdvancedFilter
	} else {
		advancedFilter.NumberNotInAdvancedFilter = nil
	}

	// StringBeginsWithAdvancedFilter
	if source.StringBeginsWithAdvancedFilter != nil {
		var stringBeginsWithAdvancedFilter AdvancedFilter_StringBeginsWithAdvancedFilter
		err := stringBeginsWithAdvancedFilter.AssignPropertiesFromAdvancedFilterStringBeginsWithAdvancedFilter(source.StringBeginsWithAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringBeginsWithAdvancedFilter from StringBeginsWithAdvancedFilter, calling AssignPropertiesFromAdvancedFilterStringBeginsWithAdvancedFilter()")
		}
		advancedFilter.StringBeginsWithAdvancedFilter = &stringBeginsWithAdvancedFilter
	} else {
		advancedFilter.StringBeginsWithAdvancedFilter = nil
	}

	// StringContainsAdvancedFilter
	if source.StringContainsAdvancedFilter != nil {
		var stringContainsAdvancedFilter AdvancedFilter_StringContainsAdvancedFilter
		err := stringContainsAdvancedFilter.AssignPropertiesFromAdvancedFilterStringContainsAdvancedFilter(source.StringContainsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringContainsAdvancedFilter from StringContainsAdvancedFilter, calling AssignPropertiesFromAdvancedFilterStringContainsAdvancedFilter()")
		}
		advancedFilter.StringContainsAdvancedFilter = &stringContainsAdvancedFilter
	} else {
		advancedFilter.StringContainsAdvancedFilter = nil
	}

	// StringEndsWithAdvancedFilter
	if source.StringEndsWithAdvancedFilter != nil {
		var stringEndsWithAdvancedFilter AdvancedFilter_StringEndsWithAdvancedFilter
		err := stringEndsWithAdvancedFilter.AssignPropertiesFromAdvancedFilterStringEndsWithAdvancedFilter(source.StringEndsWithAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringEndsWithAdvancedFilter from StringEndsWithAdvancedFilter, calling AssignPropertiesFromAdvancedFilterStringEndsWithAdvancedFilter()")
		}
		advancedFilter.StringEndsWithAdvancedFilter = &stringEndsWithAdvancedFilter
	} else {
		advancedFilter.StringEndsWithAdvancedFilter = nil
	}

	// StringInAdvancedFilter
	if source.StringInAdvancedFilter != nil {
		var stringInAdvancedFilter AdvancedFilter_StringInAdvancedFilter
		err := stringInAdvancedFilter.AssignPropertiesFromAdvancedFilterStringInAdvancedFilter(source.StringInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringInAdvancedFilter from StringInAdvancedFilter, calling AssignPropertiesFromAdvancedFilterStringInAdvancedFilter()")
		}
		advancedFilter.StringInAdvancedFilter = &stringInAdvancedFilter
	} else {
		advancedFilter.StringInAdvancedFilter = nil
	}

	// StringNotInAdvancedFilter
	if source.StringNotInAdvancedFilter != nil {
		var stringNotInAdvancedFilter AdvancedFilter_StringNotInAdvancedFilter
		err := stringNotInAdvancedFilter.AssignPropertiesFromAdvancedFilterStringNotInAdvancedFilter(source.StringNotInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringNotInAdvancedFilter from StringNotInAdvancedFilter, calling AssignPropertiesFromAdvancedFilterStringNotInAdvancedFilter()")
		}
		advancedFilter.StringNotInAdvancedFilter = &stringNotInAdvancedFilter
	} else {
		advancedFilter.StringNotInAdvancedFilter = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilter populates the provided destination AdvancedFilter from our AdvancedFilter
func (advancedFilter *AdvancedFilter) AssignPropertiesToAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BoolEqualsAdvancedFilter
	if advancedFilter.BoolEqualsAdvancedFilter != nil {
		var boolEqualsAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_BoolEqualsAdvancedFilter
		err := (*advancedFilter.BoolEqualsAdvancedFilter).AssignPropertiesToAdvancedFilterBoolEqualsAdvancedFilter(&boolEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating BoolEqualsAdvancedFilter from BoolEqualsAdvancedFilter, calling AssignPropertiesToAdvancedFilterBoolEqualsAdvancedFilter()")
		}
		destination.BoolEqualsAdvancedFilter = &boolEqualsAdvancedFilter
	} else {
		destination.BoolEqualsAdvancedFilter = nil
	}

	// NumberGreaterThanAdvancedFilter
	if advancedFilter.NumberGreaterThanAdvancedFilter != nil {
		var numberGreaterThanAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanAdvancedFilter
		err := (*advancedFilter.NumberGreaterThanAdvancedFilter).AssignPropertiesToAdvancedFilterNumberGreaterThanAdvancedFilter(&numberGreaterThanAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberGreaterThanAdvancedFilter from NumberGreaterThanAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberGreaterThanAdvancedFilter()")
		}
		destination.NumberGreaterThanAdvancedFilter = &numberGreaterThanAdvancedFilter
	} else {
		destination.NumberGreaterThanAdvancedFilter = nil
	}

	// NumberGreaterThanOrEqualsAdvancedFilter
	if advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter != nil {
		var numberGreaterThanOrEqualsAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter
		err := (*advancedFilter.NumberGreaterThanOrEqualsAdvancedFilter).AssignPropertiesToAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter(&numberGreaterThanOrEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberGreaterThanOrEqualsAdvancedFilter from NumberGreaterThanOrEqualsAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter()")
		}
		destination.NumberGreaterThanOrEqualsAdvancedFilter = &numberGreaterThanOrEqualsAdvancedFilter
	} else {
		destination.NumberGreaterThanOrEqualsAdvancedFilter = nil
	}

	// NumberInAdvancedFilter
	if advancedFilter.NumberInAdvancedFilter != nil {
		var numberInAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberInAdvancedFilter
		err := (*advancedFilter.NumberInAdvancedFilter).AssignPropertiesToAdvancedFilterNumberInAdvancedFilter(&numberInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberInAdvancedFilter from NumberInAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberInAdvancedFilter()")
		}
		destination.NumberInAdvancedFilter = &numberInAdvancedFilter
	} else {
		destination.NumberInAdvancedFilter = nil
	}

	// NumberLessThanAdvancedFilter
	if advancedFilter.NumberLessThanAdvancedFilter != nil {
		var numberLessThanAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberLessThanAdvancedFilter
		err := (*advancedFilter.NumberLessThanAdvancedFilter).AssignPropertiesToAdvancedFilterNumberLessThanAdvancedFilter(&numberLessThanAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberLessThanAdvancedFilter from NumberLessThanAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberLessThanAdvancedFilter()")
		}
		destination.NumberLessThanAdvancedFilter = &numberLessThanAdvancedFilter
	} else {
		destination.NumberLessThanAdvancedFilter = nil
	}

	// NumberLessThanOrEqualsAdvancedFilter
	if advancedFilter.NumberLessThanOrEqualsAdvancedFilter != nil {
		var numberLessThanOrEqualsAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter
		err := (*advancedFilter.NumberLessThanOrEqualsAdvancedFilter).AssignPropertiesToAdvancedFilterNumberLessThanOrEqualsAdvancedFilter(&numberLessThanOrEqualsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberLessThanOrEqualsAdvancedFilter from NumberLessThanOrEqualsAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberLessThanOrEqualsAdvancedFilter()")
		}
		destination.NumberLessThanOrEqualsAdvancedFilter = &numberLessThanOrEqualsAdvancedFilter
	} else {
		destination.NumberLessThanOrEqualsAdvancedFilter = nil
	}

	// NumberNotInAdvancedFilter
	if advancedFilter.NumberNotInAdvancedFilter != nil {
		var numberNotInAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_NumberNotInAdvancedFilter
		err := (*advancedFilter.NumberNotInAdvancedFilter).AssignPropertiesToAdvancedFilterNumberNotInAdvancedFilter(&numberNotInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating NumberNotInAdvancedFilter from NumberNotInAdvancedFilter, calling AssignPropertiesToAdvancedFilterNumberNotInAdvancedFilter()")
		}
		destination.NumberNotInAdvancedFilter = &numberNotInAdvancedFilter
	} else {
		destination.NumberNotInAdvancedFilter = nil
	}

	// StringBeginsWithAdvancedFilter
	if advancedFilter.StringBeginsWithAdvancedFilter != nil {
		var stringBeginsWithAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_StringBeginsWithAdvancedFilter
		err := (*advancedFilter.StringBeginsWithAdvancedFilter).AssignPropertiesToAdvancedFilterStringBeginsWithAdvancedFilter(&stringBeginsWithAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringBeginsWithAdvancedFilter from StringBeginsWithAdvancedFilter, calling AssignPropertiesToAdvancedFilterStringBeginsWithAdvancedFilter()")
		}
		destination.StringBeginsWithAdvancedFilter = &stringBeginsWithAdvancedFilter
	} else {
		destination.StringBeginsWithAdvancedFilter = nil
	}

	// StringContainsAdvancedFilter
	if advancedFilter.StringContainsAdvancedFilter != nil {
		var stringContainsAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_StringContainsAdvancedFilter
		err := (*advancedFilter.StringContainsAdvancedFilter).AssignPropertiesToAdvancedFilterStringContainsAdvancedFilter(&stringContainsAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringContainsAdvancedFilter from StringContainsAdvancedFilter, calling AssignPropertiesToAdvancedFilterStringContainsAdvancedFilter()")
		}
		destination.StringContainsAdvancedFilter = &stringContainsAdvancedFilter
	} else {
		destination.StringContainsAdvancedFilter = nil
	}

	// StringEndsWithAdvancedFilter
	if advancedFilter.StringEndsWithAdvancedFilter != nil {
		var stringEndsWithAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_StringEndsWithAdvancedFilter
		err := (*advancedFilter.StringEndsWithAdvancedFilter).AssignPropertiesToAdvancedFilterStringEndsWithAdvancedFilter(&stringEndsWithAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringEndsWithAdvancedFilter from StringEndsWithAdvancedFilter, calling AssignPropertiesToAdvancedFilterStringEndsWithAdvancedFilter()")
		}
		destination.StringEndsWithAdvancedFilter = &stringEndsWithAdvancedFilter
	} else {
		destination.StringEndsWithAdvancedFilter = nil
	}

	// StringInAdvancedFilter
	if advancedFilter.StringInAdvancedFilter != nil {
		var stringInAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_StringInAdvancedFilter
		err := (*advancedFilter.StringInAdvancedFilter).AssignPropertiesToAdvancedFilterStringInAdvancedFilter(&stringInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringInAdvancedFilter from StringInAdvancedFilter, calling AssignPropertiesToAdvancedFilterStringInAdvancedFilter()")
		}
		destination.StringInAdvancedFilter = &stringInAdvancedFilter
	} else {
		destination.StringInAdvancedFilter = nil
	}

	// StringNotInAdvancedFilter
	if advancedFilter.StringNotInAdvancedFilter != nil {
		var stringNotInAdvancedFilter v1alpha1api20200601storage.AdvancedFilter_StringNotInAdvancedFilter
		err := (*advancedFilter.StringNotInAdvancedFilter).AssignPropertiesToAdvancedFilterStringNotInAdvancedFilter(&stringNotInAdvancedFilter)
		if err != nil {
			return errors.Wrap(err, "populating StringNotInAdvancedFilter from StringNotInAdvancedFilter, calling AssignPropertiesToAdvancedFilterStringNotInAdvancedFilter()")
		}
		destination.StringNotInAdvancedFilter = &stringNotInAdvancedFilter
	} else {
		destination.StringNotInAdvancedFilter = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type AdvancedFilter_Status struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	//OperatorType: The operator type used for filtering, e.g., NumberIn,
	//StringContains, BoolEquals and others.
	OperatorType AdvancedFilterStatusOperatorType `json:"operatorType"`
}

var _ genruntime.FromARMConverter = &AdvancedFilter_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStatus *AdvancedFilter_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStatus *AdvancedFilter_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StatusARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStatus.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStatus.OperatorType = typedInput.OperatorType

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStatus populates our AdvancedFilter_Status from the provided source AdvancedFilter_Status
func (advancedFilterStatus *AdvancedFilter_Status) AssignPropertiesFromAdvancedFilterStatus(source *v1alpha1api20200601storage.AdvancedFilter_Status) error {

	// Key
	advancedFilterStatus.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStatus.OperatorType = AdvancedFilterStatusOperatorType(*source.OperatorType)
	} else {
		advancedFilterStatus.OperatorType = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStatus populates the provided destination AdvancedFilter_Status from our AdvancedFilter_Status
func (advancedFilterStatus *AdvancedFilter_Status) AssignPropertiesToAdvancedFilterStatus(destination *v1alpha1api20200601storage.AdvancedFilter_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStatus.Key)

	// OperatorType
	operatorType := string(advancedFilterStatus.OperatorType)
	destination.OperatorType = &operatorType

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AzureFunctionEventSubscriptionDestination
type AzureFunctionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType AzureFunctionEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Azure Function destination of an
	//event subscription.
	Properties *AzureFunctionEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if azureFunctionEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result AzureFunctionEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = azureFunctionEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if azureFunctionEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*azureFunctionEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(AzureFunctionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	azureFunctionEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 AzureFunctionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		azureFunctionEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromAzureFunctionEventSubscriptionDestination populates our AzureFunctionEventSubscriptionDestination from the provided source AzureFunctionEventSubscriptionDestination
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) AssignPropertiesFromAzureFunctionEventSubscriptionDestination(source *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		azureFunctionEventSubscriptionDestination.EndpointType = AzureFunctionEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		azureFunctionEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property AzureFunctionEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties()")
		}
		azureFunctionEventSubscriptionDestination.Properties = &property
	} else {
		azureFunctionEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFunctionEventSubscriptionDestination populates the provided destination AzureFunctionEventSubscriptionDestination from our AzureFunctionEventSubscriptionDestination
func (azureFunctionEventSubscriptionDestination *AzureFunctionEventSubscriptionDestination) AssignPropertiesToAzureFunctionEventSubscriptionDestination(destination *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(azureFunctionEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if azureFunctionEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties
		err := (*azureFunctionEventSubscriptionDestination.Properties).AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeadLetterDestinationStatusEndpointType string

const DeadLetterDestinationStatusEndpointTypeStorageBlob = DeadLetterDestinationStatusEndpointType("StorageBlob")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventHubEventSubscriptionDestination
type EventHubEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType EventHubEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a event hub destination.
	Properties *EventHubEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventHubEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result EventHubEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = eventHubEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if eventHubEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*eventHubEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(EventHubEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EventHubEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	eventHubEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 EventHubEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		eventHubEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromEventHubEventSubscriptionDestination populates our EventHubEventSubscriptionDestination from the provided source EventHubEventSubscriptionDestination
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) AssignPropertiesFromEventHubEventSubscriptionDestination(source *v1alpha1api20200601storage.EventHubEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		eventHubEventSubscriptionDestination.EndpointType = EventHubEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		eventHubEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property EventHubEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromEventHubEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromEventHubEventSubscriptionDestinationProperties()")
		}
		eventHubEventSubscriptionDestination.Properties = &property
	} else {
		eventHubEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventHubEventSubscriptionDestination populates the provided destination EventHubEventSubscriptionDestination from our EventHubEventSubscriptionDestination
func (eventHubEventSubscriptionDestination *EventHubEventSubscriptionDestination) AssignPropertiesToEventHubEventSubscriptionDestination(destination *v1alpha1api20200601storage.EventHubEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(eventHubEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if eventHubEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties
		err := (*eventHubEventSubscriptionDestination.Properties).AssignPropertiesToEventHubEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToEventHubEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EventSubscriptionDestinationStatusEndpointType string

const (
	EventSubscriptionDestinationStatusEndpointTypeAzureFunction    = EventSubscriptionDestinationStatusEndpointType("AzureFunction")
	EventSubscriptionDestinationStatusEndpointTypeEventHub         = EventSubscriptionDestinationStatusEndpointType("EventHub")
	EventSubscriptionDestinationStatusEndpointTypeHybridConnection = EventSubscriptionDestinationStatusEndpointType("HybridConnection")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusQueue  = EventSubscriptionDestinationStatusEndpointType("ServiceBusQueue")
	EventSubscriptionDestinationStatusEndpointTypeServiceBusTopic  = EventSubscriptionDestinationStatusEndpointType("ServiceBusTopic")
	EventSubscriptionDestinationStatusEndpointTypeStorageQueue     = EventSubscriptionDestinationStatusEndpointType("StorageQueue")
	EventSubscriptionDestinationStatusEndpointTypeWebHook          = EventSubscriptionDestinationStatusEndpointType("WebHook")
)

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/HybridConnectionEventSubscriptionDestination
type HybridConnectionEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType HybridConnectionEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a hybrid connection destination.
	Properties *HybridConnectionEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if hybridConnectionEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result HybridConnectionEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = hybridConnectionEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if hybridConnectionEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*hybridConnectionEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(HybridConnectionEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HybridConnectionEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	hybridConnectionEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 HybridConnectionEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		hybridConnectionEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromHybridConnectionEventSubscriptionDestination populates our HybridConnectionEventSubscriptionDestination from the provided source HybridConnectionEventSubscriptionDestination
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) AssignPropertiesFromHybridConnectionEventSubscriptionDestination(source *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		hybridConnectionEventSubscriptionDestination.EndpointType = HybridConnectionEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		hybridConnectionEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property HybridConnectionEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties()")
		}
		hybridConnectionEventSubscriptionDestination.Properties = &property
	} else {
		hybridConnectionEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHybridConnectionEventSubscriptionDestination populates the provided destination HybridConnectionEventSubscriptionDestination from our HybridConnectionEventSubscriptionDestination
func (hybridConnectionEventSubscriptionDestination *HybridConnectionEventSubscriptionDestination) AssignPropertiesToHybridConnectionEventSubscriptionDestination(destination *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(hybridConnectionEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if hybridConnectionEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties
		err := (*hybridConnectionEventSubscriptionDestination.Properties).AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusQueueEventSubscriptionDestination
type ServiceBusQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType ServiceBusQueueEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Service Bus destination of an
	//event subscription.
	Properties *ServiceBusQueueEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusQueueEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result ServiceBusQueueEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = serviceBusQueueEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if serviceBusQueueEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*serviceBusQueueEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	serviceBusQueueEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		serviceBusQueueEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceBusQueueEventSubscriptionDestination populates our ServiceBusQueueEventSubscriptionDestination from the provided source ServiceBusQueueEventSubscriptionDestination
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) AssignPropertiesFromServiceBusQueueEventSubscriptionDestination(source *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		serviceBusQueueEventSubscriptionDestination.EndpointType = ServiceBusQueueEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		serviceBusQueueEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusQueueEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties()")
		}
		serviceBusQueueEventSubscriptionDestination.Properties = &property
	} else {
		serviceBusQueueEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusQueueEventSubscriptionDestination populates the provided destination ServiceBusQueueEventSubscriptionDestination from our ServiceBusQueueEventSubscriptionDestination
func (serviceBusQueueEventSubscriptionDestination *ServiceBusQueueEventSubscriptionDestination) AssignPropertiesToServiceBusQueueEventSubscriptionDestination(destination *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(serviceBusQueueEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if serviceBusQueueEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties
		err := (*serviceBusQueueEventSubscriptionDestination.Properties).AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusTopicEventSubscriptionDestination
type ServiceBusTopicEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType ServiceBusTopicEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties that represent the Service Bus Topic destination of
	//an event subscription.
	Properties *ServiceBusTopicEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusTopicEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result ServiceBusTopicEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = serviceBusTopicEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if serviceBusTopicEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*serviceBusTopicEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	serviceBusTopicEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 ServiceBusTopicEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		serviceBusTopicEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromServiceBusTopicEventSubscriptionDestination populates our ServiceBusTopicEventSubscriptionDestination from the provided source ServiceBusTopicEventSubscriptionDestination
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) AssignPropertiesFromServiceBusTopicEventSubscriptionDestination(source *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		serviceBusTopicEventSubscriptionDestination.EndpointType = ServiceBusTopicEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		serviceBusTopicEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property ServiceBusTopicEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties()")
		}
		serviceBusTopicEventSubscriptionDestination.Properties = &property
	} else {
		serviceBusTopicEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusTopicEventSubscriptionDestination populates the provided destination ServiceBusTopicEventSubscriptionDestination from our ServiceBusTopicEventSubscriptionDestination
func (serviceBusTopicEventSubscriptionDestination *ServiceBusTopicEventSubscriptionDestination) AssignPropertiesToServiceBusTopicEventSubscriptionDestination(destination *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(serviceBusTopicEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if serviceBusTopicEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties
		err := (*serviceBusTopicEventSubscriptionDestination.Properties).AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"StorageBlob"}
type StorageBlobDeadLetterDestinationEndpointType string

const StorageBlobDeadLetterDestinationEndpointTypeStorageBlob = StorageBlobDeadLetterDestinationEndpointType("StorageBlob")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageBlobDeadLetterDestinationProperties
type StorageBlobDeadLetterDestinationProperties struct {
	//BlobContainerName: The name of the Storage blob container that is the
	//destination of the deadletter events
	BlobContainerName *string `json:"blobContainerName,omitempty"`

	//ResourceReference: The Azure Resource ID of the storage account that is the
	//destination of the deadletter events
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageBlobDeadLetterDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageBlobDeadLetterDestinationProperties == nil {
		return nil, nil
	}
	var result StorageBlobDeadLetterDestinationPropertiesARM

	// Set property ‘BlobContainerName’:
	if storageBlobDeadLetterDestinationProperties.BlobContainerName != nil {
		blobContainerName := *storageBlobDeadLetterDestinationProperties.BlobContainerName
		result.BlobContainerName = &blobContainerName
	}

	// Set property ‘ResourceId’:
	if storageBlobDeadLetterDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*storageBlobDeadLetterDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageBlobDeadLetterDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageBlobDeadLetterDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageBlobDeadLetterDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘BlobContainerName’:
	if typedInput.BlobContainerName != nil {
		blobContainerName := *typedInput.BlobContainerName
		storageBlobDeadLetterDestinationProperties.BlobContainerName = &blobContainerName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromStorageBlobDeadLetterDestinationProperties populates our StorageBlobDeadLetterDestinationProperties from the provided source StorageBlobDeadLetterDestinationProperties
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) AssignPropertiesFromStorageBlobDeadLetterDestinationProperties(source *v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties) error {

	// BlobContainerName
	storageBlobDeadLetterDestinationProperties.BlobContainerName = genruntime.ClonePointerToString(source.BlobContainerName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		storageBlobDeadLetterDestinationProperties.ResourceReference = &resourceReference
	} else {
		storageBlobDeadLetterDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageBlobDeadLetterDestinationProperties populates the provided destination StorageBlobDeadLetterDestinationProperties from our StorageBlobDeadLetterDestinationProperties
func (storageBlobDeadLetterDestinationProperties *StorageBlobDeadLetterDestinationProperties) AssignPropertiesToStorageBlobDeadLetterDestinationProperties(destination *v1alpha1api20200601storage.StorageBlobDeadLetterDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobContainerName
	destination.BlobContainerName = genruntime.ClonePointerToString(storageBlobDeadLetterDestinationProperties.BlobContainerName)

	// ResourceReference
	if storageBlobDeadLetterDestinationProperties.ResourceReference != nil {
		resourceReference := storageBlobDeadLetterDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageQueueEventSubscriptionDestination
type StorageQueueEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType StorageQueueEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: The properties for a storage queue destination.
	Properties *StorageQueueEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageQueueEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result StorageQueueEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = storageQueueEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if storageQueueEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*storageQueueEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(StorageQueueEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	storageQueueEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 StorageQueueEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		storageQueueEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageQueueEventSubscriptionDestination populates our StorageQueueEventSubscriptionDestination from the provided source StorageQueueEventSubscriptionDestination
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) AssignPropertiesFromStorageQueueEventSubscriptionDestination(source *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		storageQueueEventSubscriptionDestination.EndpointType = StorageQueueEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		storageQueueEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property StorageQueueEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties()")
		}
		storageQueueEventSubscriptionDestination.Properties = &property
	} else {
		storageQueueEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageQueueEventSubscriptionDestination populates the provided destination StorageQueueEventSubscriptionDestination from our StorageQueueEventSubscriptionDestination
func (storageQueueEventSubscriptionDestination *StorageQueueEventSubscriptionDestination) AssignPropertiesToStorageQueueEventSubscriptionDestination(destination *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(storageQueueEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if storageQueueEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties
		err := (*storageQueueEventSubscriptionDestination.Properties).AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/WebHookEventSubscriptionDestination
type WebHookEventSubscriptionDestination struct {
	// +kubebuilder:validation:Required
	EndpointType WebHookEventSubscriptionDestinationEndpointType `json:"endpointType"`

	//Properties: Information about the webhook destination properties for an event
	//subscription.
	Properties *WebHookEventSubscriptionDestinationProperties `json:"properties,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestination{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webHookEventSubscriptionDestination == nil {
		return nil, nil
	}
	var result WebHookEventSubscriptionDestinationARM

	// Set property ‘EndpointType’:
	result.EndpointType = webHookEventSubscriptionDestination.EndpointType

	// Set property ‘Properties’:
	if webHookEventSubscriptionDestination.Properties != nil {
		propertiesARM, err := (*webHookEventSubscriptionDestination.Properties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		properties := propertiesARM.(WebHookEventSubscriptionDestinationPropertiesARM)
		result.Properties = &properties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationARM, got %T", armInput)
	}

	// Set property ‘EndpointType’:
	webHookEventSubscriptionDestination.EndpointType = typedInput.EndpointType

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		var properties1 WebHookEventSubscriptionDestinationProperties
		err := properties1.PopulateFromARM(owner, *typedInput.Properties)
		if err != nil {
			return err
		}
		properties := properties1
		webHookEventSubscriptionDestination.Properties = &properties
	}

	// No error
	return nil
}

// AssignPropertiesFromWebHookEventSubscriptionDestination populates our WebHookEventSubscriptionDestination from the provided source WebHookEventSubscriptionDestination
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) AssignPropertiesFromWebHookEventSubscriptionDestination(source *v1alpha1api20200601storage.WebHookEventSubscriptionDestination) error {

	// EndpointType
	if source.EndpointType != nil {
		webHookEventSubscriptionDestination.EndpointType = WebHookEventSubscriptionDestinationEndpointType(*source.EndpointType)
	} else {
		webHookEventSubscriptionDestination.EndpointType = ""
	}

	// Properties
	if source.Properties != nil {
		var property WebHookEventSubscriptionDestinationProperties
		err := property.AssignPropertiesFromWebHookEventSubscriptionDestinationProperties(source.Properties)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesFromWebHookEventSubscriptionDestinationProperties()")
		}
		webHookEventSubscriptionDestination.Properties = &property
	} else {
		webHookEventSubscriptionDestination.Properties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToWebHookEventSubscriptionDestination populates the provided destination WebHookEventSubscriptionDestination from our WebHookEventSubscriptionDestination
func (webHookEventSubscriptionDestination *WebHookEventSubscriptionDestination) AssignPropertiesToWebHookEventSubscriptionDestination(destination *v1alpha1api20200601storage.WebHookEventSubscriptionDestination) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndpointType
	endpointType := string(webHookEventSubscriptionDestination.EndpointType)
	destination.EndpointType = &endpointType

	// Properties
	if webHookEventSubscriptionDestination.Properties != nil {
		var property v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties
		err := (*webHookEventSubscriptionDestination.Properties).AssignPropertiesToWebHookEventSubscriptionDestinationProperties(&property)
		if err != nil {
			return errors.Wrap(err, "populating Properties from Properties, calling AssignPropertiesToWebHookEventSubscriptionDestinationProperties()")
		}
		destination.Properties = &property
	} else {
		destination.Properties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilterStatusOperatorType string

const (
	AdvancedFilterStatusOperatorTypeBoolEquals                = AdvancedFilterStatusOperatorType("BoolEquals")
	AdvancedFilterStatusOperatorTypeNumberGreaterThan         = AdvancedFilterStatusOperatorType("NumberGreaterThan")
	AdvancedFilterStatusOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterStatusOperatorType("NumberGreaterThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberIn                  = AdvancedFilterStatusOperatorType("NumberIn")
	AdvancedFilterStatusOperatorTypeNumberLessThan            = AdvancedFilterStatusOperatorType("NumberLessThan")
	AdvancedFilterStatusOperatorTypeNumberLessThanOrEquals    = AdvancedFilterStatusOperatorType("NumberLessThanOrEquals")
	AdvancedFilterStatusOperatorTypeNumberNotIn               = AdvancedFilterStatusOperatorType("NumberNotIn")
	AdvancedFilterStatusOperatorTypeStringBeginsWith          = AdvancedFilterStatusOperatorType("StringBeginsWith")
	AdvancedFilterStatusOperatorTypeStringContains            = AdvancedFilterStatusOperatorType("StringContains")
	AdvancedFilterStatusOperatorTypeStringEndsWith            = AdvancedFilterStatusOperatorType("StringEndsWith")
	AdvancedFilterStatusOperatorTypeStringIn                  = AdvancedFilterStatusOperatorType("StringIn")
	AdvancedFilterStatusOperatorTypeStringNotIn               = AdvancedFilterStatusOperatorType("StringNotIn")
)

type AdvancedFilter_BoolEqualsAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterBoolEqualsAdvancedFilterOperatorType `json:"operatorType"`

	//Value: The boolean filter value.
	Value *bool `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_BoolEqualsAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterBoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterBoolEqualsAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_BoolEqualsAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterBoolEqualsAdvancedFilter.Key != nil {
		key := *advancedFilterBoolEqualsAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterBoolEqualsAdvancedFilter.OperatorType

	// Set property ‘Value’:
	if advancedFilterBoolEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterBoolEqualsAdvancedFilter.Value
		result.Value = &value
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterBoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_BoolEqualsAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterBoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_BoolEqualsAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_BoolEqualsAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterBoolEqualsAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterBoolEqualsAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterBoolEqualsAdvancedFilter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterBoolEqualsAdvancedFilter populates our AdvancedFilter_BoolEqualsAdvancedFilter from the provided source AdvancedFilter_BoolEqualsAdvancedFilter
func (advancedFilterBoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter) AssignPropertiesFromAdvancedFilterBoolEqualsAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_BoolEqualsAdvancedFilter) error {

	// Key
	advancedFilterBoolEqualsAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterBoolEqualsAdvancedFilter.OperatorType = AdvancedFilterBoolEqualsAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterBoolEqualsAdvancedFilter.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterBoolEqualsAdvancedFilter.Value = &value
	} else {
		advancedFilterBoolEqualsAdvancedFilter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterBoolEqualsAdvancedFilter populates the provided destination AdvancedFilter_BoolEqualsAdvancedFilter from our AdvancedFilter_BoolEqualsAdvancedFilter
func (advancedFilterBoolEqualsAdvancedFilter *AdvancedFilter_BoolEqualsAdvancedFilter) AssignPropertiesToAdvancedFilterBoolEqualsAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_BoolEqualsAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterBoolEqualsAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterBoolEqualsAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterBoolEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterBoolEqualsAdvancedFilter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberGreaterThanAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberGreaterThanAdvancedFilterOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThanAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberGreaterThanAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberGreaterThanAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberGreaterThanAdvancedFilter.Key != nil {
		key := *advancedFilterNumberGreaterThanAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberGreaterThanAdvancedFilter.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberGreaterThanAdvancedFilter.Value != nil {
		value := *advancedFilterNumberGreaterThanAdvancedFilter.Value
		result.Value = &value
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberGreaterThanAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberGreaterThanAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberGreaterThanAdvancedFilter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberGreaterThanAdvancedFilter populates our AdvancedFilter_NumberGreaterThanAdvancedFilter from the provided source AdvancedFilter_NumberGreaterThanAdvancedFilter
func (advancedFilterNumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberGreaterThanAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanAdvancedFilter) error {

	// Key
	advancedFilterNumberGreaterThanAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberGreaterThanAdvancedFilter.OperatorType = AdvancedFilterNumberGreaterThanAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberGreaterThanAdvancedFilter.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberGreaterThanAdvancedFilter.Value = &value
	} else {
		advancedFilterNumberGreaterThanAdvancedFilter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberGreaterThanAdvancedFilter populates the provided destination AdvancedFilter_NumberGreaterThanAdvancedFilter from our AdvancedFilter_NumberGreaterThanAdvancedFilter
func (advancedFilterNumberGreaterThanAdvancedFilter *AdvancedFilter_NumberGreaterThanAdvancedFilter) AssignPropertiesToAdvancedFilterNumberGreaterThanAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberGreaterThanAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberGreaterThanAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberGreaterThanAdvancedFilter.Value != nil {
		value := *advancedFilterNumberGreaterThanAdvancedFilter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberGreaterThanOrEqualsAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Key != nil {
		key := *advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value
		result.Value = &value
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter populates our AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter from the provided source AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter
func (advancedFilterNumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) error {

	// Key
	advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.OperatorType = AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value = &value
	} else {
		advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter populates the provided destination AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter from our AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter
func (advancedFilterNumberGreaterThanOrEqualsAdvancedFilter *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) AssignPropertiesToAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterNumberGreaterThanOrEqualsAdvancedFilter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberInAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberInAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []float64 `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberInAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberInAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberInAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberInAdvancedFilter.Key != nil {
		key := *advancedFilterNumberInAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberInAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterNumberInAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberInAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberInAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberInAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberInAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberInAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterNumberInAdvancedFilter.Values = append(advancedFilterNumberInAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberInAdvancedFilter populates our AdvancedFilter_NumberInAdvancedFilter from the provided source AdvancedFilter_NumberInAdvancedFilter
func (advancedFilterNumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberInAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberInAdvancedFilter) error {

	// Key
	advancedFilterNumberInAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberInAdvancedFilter.OperatorType = AdvancedFilterNumberInAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberInAdvancedFilter.OperatorType = ""
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		advancedFilterNumberInAdvancedFilter.Values = valueList
	} else {
		advancedFilterNumberInAdvancedFilter.Values = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberInAdvancedFilter populates the provided destination AdvancedFilter_NumberInAdvancedFilter from our AdvancedFilter_NumberInAdvancedFilter
func (advancedFilterNumberInAdvancedFilter *AdvancedFilter_NumberInAdvancedFilter) AssignPropertiesToAdvancedFilterNumberInAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberInAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberInAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberInAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	if advancedFilterNumberInAdvancedFilter.Values != nil {
		valueList := make([]float64, len(advancedFilterNumberInAdvancedFilter.Values))
		for valueIndex, valueItem := range advancedFilterNumberInAdvancedFilter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberLessThanAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberLessThanAdvancedFilterOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThanAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberLessThanAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberLessThanAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberLessThanAdvancedFilter.Key != nil {
		key := *advancedFilterNumberLessThanAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberLessThanAdvancedFilter.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberLessThanAdvancedFilter.Value != nil {
		value := *advancedFilterNumberLessThanAdvancedFilter.Value
		result.Value = &value
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberLessThanAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberLessThanAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberLessThanAdvancedFilter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberLessThanAdvancedFilter populates our AdvancedFilter_NumberLessThanAdvancedFilter from the provided source AdvancedFilter_NumberLessThanAdvancedFilter
func (advancedFilterNumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberLessThanAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanAdvancedFilter) error {

	// Key
	advancedFilterNumberLessThanAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberLessThanAdvancedFilter.OperatorType = AdvancedFilterNumberLessThanAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberLessThanAdvancedFilter.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberLessThanAdvancedFilter.Value = &value
	} else {
		advancedFilterNumberLessThanAdvancedFilter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberLessThanAdvancedFilter populates the provided destination AdvancedFilter_NumberLessThanAdvancedFilter from our AdvancedFilter_NumberLessThanAdvancedFilter
func (advancedFilterNumberLessThanAdvancedFilter *AdvancedFilter_NumberLessThanAdvancedFilter) AssignPropertiesToAdvancedFilterNumberLessThanAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberLessThanAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberLessThanAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberLessThanAdvancedFilter.Value != nil {
		value := *advancedFilterNumberLessThanAdvancedFilter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorType `json:"operatorType"`

	//Value: The filter value.
	Value *float64 `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberLessThanOrEqualsAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberLessThanOrEqualsAdvancedFilter.Key != nil {
		key := *advancedFilterNumberLessThanOrEqualsAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberLessThanOrEqualsAdvancedFilter.OperatorType

	// Set property ‘Value’:
	if advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value
		result.Value = &value
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberLessThanOrEqualsAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberLessThanOrEqualsAdvancedFilter populates our AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter from the provided source AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter
func (advancedFilterNumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberLessThanOrEqualsAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) error {

	// Key
	advancedFilterNumberLessThanOrEqualsAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.OperatorType = AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.OperatorType = ""
	}

	// Value
	if source.Value != nil {
		value := *source.Value
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value = &value
	} else {
		advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberLessThanOrEqualsAdvancedFilter populates the provided destination AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter from our AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter
func (advancedFilterNumberLessThanOrEqualsAdvancedFilter *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) AssignPropertiesToAdvancedFilterNumberLessThanOrEqualsAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberLessThanOrEqualsAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberLessThanOrEqualsAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberLessThanOrEqualsAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Value
	if advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value != nil {
		value := *advancedFilterNumberLessThanOrEqualsAdvancedFilter.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_NumberNotInAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterNumberNotInAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []float64 `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_NumberNotInAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterNumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterNumberNotInAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_NumberNotInAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterNumberNotInAdvancedFilter.Key != nil {
		key := *advancedFilterNumberNotInAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterNumberNotInAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterNumberNotInAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterNumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_NumberNotInAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterNumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_NumberNotInAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_NumberNotInAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterNumberNotInAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterNumberNotInAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterNumberNotInAdvancedFilter.Values = append(advancedFilterNumberNotInAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterNumberNotInAdvancedFilter populates our AdvancedFilter_NumberNotInAdvancedFilter from the provided source AdvancedFilter_NumberNotInAdvancedFilter
func (advancedFilterNumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter) AssignPropertiesFromAdvancedFilterNumberNotInAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_NumberNotInAdvancedFilter) error {

	// Key
	advancedFilterNumberNotInAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterNumberNotInAdvancedFilter.OperatorType = AdvancedFilterNumberNotInAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterNumberNotInAdvancedFilter.OperatorType = ""
	}

	// Values
	if source.Values != nil {
		valueList := make([]float64, len(source.Values))
		for valueIndex, valueItem := range source.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		advancedFilterNumberNotInAdvancedFilter.Values = valueList
	} else {
		advancedFilterNumberNotInAdvancedFilter.Values = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterNumberNotInAdvancedFilter populates the provided destination AdvancedFilter_NumberNotInAdvancedFilter from our AdvancedFilter_NumberNotInAdvancedFilter
func (advancedFilterNumberNotInAdvancedFilter *AdvancedFilter_NumberNotInAdvancedFilter) AssignPropertiesToAdvancedFilterNumberNotInAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_NumberNotInAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterNumberNotInAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterNumberNotInAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	if advancedFilterNumberNotInAdvancedFilter.Values != nil {
		valueList := make([]float64, len(advancedFilterNumberNotInAdvancedFilter.Values))
		for valueIndex, valueItem := range advancedFilterNumberNotInAdvancedFilter.Values {
			// Shadow the loop variable to avoid aliasing
			valueItem := valueItem
			valueList[valueIndex] = valueItem
		}
		destination.Values = valueList
	} else {
		destination.Values = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringBeginsWithAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringBeginsWithAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringBeginsWithAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringBeginsWithAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringBeginsWithAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterStringBeginsWithAdvancedFilter.Key != nil {
		key := *advancedFilterStringBeginsWithAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringBeginsWithAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringBeginsWithAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringBeginsWithAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringBeginsWithAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringBeginsWithAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringBeginsWithAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringBeginsWithAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringBeginsWithAdvancedFilter.Values = append(advancedFilterStringBeginsWithAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringBeginsWithAdvancedFilter populates our AdvancedFilter_StringBeginsWithAdvancedFilter from the provided source AdvancedFilter_StringBeginsWithAdvancedFilter
func (advancedFilterStringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter) AssignPropertiesFromAdvancedFilterStringBeginsWithAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_StringBeginsWithAdvancedFilter) error {

	// Key
	advancedFilterStringBeginsWithAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringBeginsWithAdvancedFilter.OperatorType = AdvancedFilterStringBeginsWithAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringBeginsWithAdvancedFilter.OperatorType = ""
	}

	// Values
	advancedFilterStringBeginsWithAdvancedFilter.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringBeginsWithAdvancedFilter populates the provided destination AdvancedFilter_StringBeginsWithAdvancedFilter from our AdvancedFilter_StringBeginsWithAdvancedFilter
func (advancedFilterStringBeginsWithAdvancedFilter *AdvancedFilter_StringBeginsWithAdvancedFilter) AssignPropertiesToAdvancedFilterStringBeginsWithAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_StringBeginsWithAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringBeginsWithAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterStringBeginsWithAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringBeginsWithAdvancedFilter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringContainsAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringContainsAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringContainsAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringContainsAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringContainsAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterStringContainsAdvancedFilter.Key != nil {
		key := *advancedFilterStringContainsAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringContainsAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringContainsAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringContainsAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringContainsAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringContainsAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringContainsAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringContainsAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringContainsAdvancedFilter.Values = append(advancedFilterStringContainsAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringContainsAdvancedFilter populates our AdvancedFilter_StringContainsAdvancedFilter from the provided source AdvancedFilter_StringContainsAdvancedFilter
func (advancedFilterStringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter) AssignPropertiesFromAdvancedFilterStringContainsAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_StringContainsAdvancedFilter) error {

	// Key
	advancedFilterStringContainsAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringContainsAdvancedFilter.OperatorType = AdvancedFilterStringContainsAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringContainsAdvancedFilter.OperatorType = ""
	}

	// Values
	advancedFilterStringContainsAdvancedFilter.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringContainsAdvancedFilter populates the provided destination AdvancedFilter_StringContainsAdvancedFilter from our AdvancedFilter_StringContainsAdvancedFilter
func (advancedFilterStringContainsAdvancedFilter *AdvancedFilter_StringContainsAdvancedFilter) AssignPropertiesToAdvancedFilterStringContainsAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_StringContainsAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringContainsAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterStringContainsAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringContainsAdvancedFilter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringEndsWithAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringEndsWithAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringEndsWithAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringEndsWithAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringEndsWithAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterStringEndsWithAdvancedFilter.Key != nil {
		key := *advancedFilterStringEndsWithAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringEndsWithAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringEndsWithAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringEndsWithAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringEndsWithAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringEndsWithAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringEndsWithAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringEndsWithAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringEndsWithAdvancedFilter.Values = append(advancedFilterStringEndsWithAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringEndsWithAdvancedFilter populates our AdvancedFilter_StringEndsWithAdvancedFilter from the provided source AdvancedFilter_StringEndsWithAdvancedFilter
func (advancedFilterStringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter) AssignPropertiesFromAdvancedFilterStringEndsWithAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_StringEndsWithAdvancedFilter) error {

	// Key
	advancedFilterStringEndsWithAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringEndsWithAdvancedFilter.OperatorType = AdvancedFilterStringEndsWithAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringEndsWithAdvancedFilter.OperatorType = ""
	}

	// Values
	advancedFilterStringEndsWithAdvancedFilter.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringEndsWithAdvancedFilter populates the provided destination AdvancedFilter_StringEndsWithAdvancedFilter from our AdvancedFilter_StringEndsWithAdvancedFilter
func (advancedFilterStringEndsWithAdvancedFilter *AdvancedFilter_StringEndsWithAdvancedFilter) AssignPropertiesToAdvancedFilterStringEndsWithAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_StringEndsWithAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringEndsWithAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterStringEndsWithAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringEndsWithAdvancedFilter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringInAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringInAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringInAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringInAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringInAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterStringInAdvancedFilter.Key != nil {
		key := *advancedFilterStringInAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringInAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringInAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringInAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringInAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringInAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringInAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringInAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringInAdvancedFilter.Values = append(advancedFilterStringInAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringInAdvancedFilter populates our AdvancedFilter_StringInAdvancedFilter from the provided source AdvancedFilter_StringInAdvancedFilter
func (advancedFilterStringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter) AssignPropertiesFromAdvancedFilterStringInAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_StringInAdvancedFilter) error {

	// Key
	advancedFilterStringInAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringInAdvancedFilter.OperatorType = AdvancedFilterStringInAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringInAdvancedFilter.OperatorType = ""
	}

	// Values
	advancedFilterStringInAdvancedFilter.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringInAdvancedFilter populates the provided destination AdvancedFilter_StringInAdvancedFilter from our AdvancedFilter_StringInAdvancedFilter
func (advancedFilterStringInAdvancedFilter *AdvancedFilter_StringInAdvancedFilter) AssignPropertiesToAdvancedFilterStringInAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_StringInAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringInAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterStringInAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringInAdvancedFilter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AdvancedFilter_StringNotInAdvancedFilter struct {
	//Key: The field/property in the event based on which you want to filter.
	Key *string `json:"key,omitempty"`

	// +kubebuilder:validation:Required
	OperatorType AdvancedFilterStringNotInAdvancedFilterOperatorType `json:"operatorType"`

	//Values: The set of filter values.
	Values []string `json:"values,omitempty"`
}

var _ genruntime.ARMTransformer = &AdvancedFilter_StringNotInAdvancedFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (advancedFilterStringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if advancedFilterStringNotInAdvancedFilter == nil {
		return nil, nil
	}
	var result AdvancedFilter_StringNotInAdvancedFilterARM

	// Set property ‘Key’:
	if advancedFilterStringNotInAdvancedFilter.Key != nil {
		key := *advancedFilterStringNotInAdvancedFilter.Key
		result.Key = &key
	}

	// Set property ‘OperatorType’:
	result.OperatorType = advancedFilterStringNotInAdvancedFilter.OperatorType

	// Set property ‘Values’:
	for _, item := range advancedFilterStringNotInAdvancedFilter.Values {
		result.Values = append(result.Values, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (advancedFilterStringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AdvancedFilter_StringNotInAdvancedFilterARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (advancedFilterStringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AdvancedFilter_StringNotInAdvancedFilterARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AdvancedFilter_StringNotInAdvancedFilterARM, got %T", armInput)
	}

	// Set property ‘Key’:
	if typedInput.Key != nil {
		key := *typedInput.Key
		advancedFilterStringNotInAdvancedFilter.Key = &key
	}

	// Set property ‘OperatorType’:
	advancedFilterStringNotInAdvancedFilter.OperatorType = typedInput.OperatorType

	// Set property ‘Values’:
	for _, item := range typedInput.Values {
		advancedFilterStringNotInAdvancedFilter.Values = append(advancedFilterStringNotInAdvancedFilter.Values, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromAdvancedFilterStringNotInAdvancedFilter populates our AdvancedFilter_StringNotInAdvancedFilter from the provided source AdvancedFilter_StringNotInAdvancedFilter
func (advancedFilterStringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter) AssignPropertiesFromAdvancedFilterStringNotInAdvancedFilter(source *v1alpha1api20200601storage.AdvancedFilter_StringNotInAdvancedFilter) error {

	// Key
	advancedFilterStringNotInAdvancedFilter.Key = genruntime.ClonePointerToString(source.Key)

	// OperatorType
	if source.OperatorType != nil {
		advancedFilterStringNotInAdvancedFilter.OperatorType = AdvancedFilterStringNotInAdvancedFilterOperatorType(*source.OperatorType)
	} else {
		advancedFilterStringNotInAdvancedFilter.OperatorType = ""
	}

	// Values
	advancedFilterStringNotInAdvancedFilter.Values = genruntime.CloneSliceOfString(source.Values)

	// No error
	return nil
}

// AssignPropertiesToAdvancedFilterStringNotInAdvancedFilter populates the provided destination AdvancedFilter_StringNotInAdvancedFilter from our AdvancedFilter_StringNotInAdvancedFilter
func (advancedFilterStringNotInAdvancedFilter *AdvancedFilter_StringNotInAdvancedFilter) AssignPropertiesToAdvancedFilterStringNotInAdvancedFilter(destination *v1alpha1api20200601storage.AdvancedFilter_StringNotInAdvancedFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key
	destination.Key = genruntime.ClonePointerToString(advancedFilterStringNotInAdvancedFilter.Key)

	// OperatorType
	operatorType := string(advancedFilterStringNotInAdvancedFilter.OperatorType)
	destination.OperatorType = &operatorType

	// Values
	destination.Values = genruntime.CloneSliceOfString(advancedFilterStringNotInAdvancedFilter.Values)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureFunction"}
type AzureFunctionEventSubscriptionDestinationEndpointType string

const AzureFunctionEventSubscriptionDestinationEndpointTypeAzureFunction = AzureFunctionEventSubscriptionDestinationEndpointType("AzureFunction")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/AzureFunctionEventSubscriptionDestinationProperties
type AzureFunctionEventSubscriptionDestinationProperties struct {
	//MaxEventsPerBatch: Maximum number of events per batch.
	MaxEventsPerBatch *int `json:"maxEventsPerBatch,omitempty"`

	//PreferredBatchSizeInKilobytes: Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `json:"preferredBatchSizeInKilobytes,omitempty"`

	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Azure Function destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &AzureFunctionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if azureFunctionEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result AzureFunctionEventSubscriptionDestinationPropertiesARM

	// Set property ‘MaxEventsPerBatch’:
	if azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// Set property ‘ResourceId’:
	if azureFunctionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*azureFunctionEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFunctionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFunctionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFunctionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties populates our AzureFunctionEventSubscriptionDestinationProperties from the provided source AzureFunctionEventSubscriptionDestinationProperties
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) AssignPropertiesFromAzureFunctionEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties) error {

	// MaxEventsPerBatch
	azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		azureFunctionEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		azureFunctionEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties populates the provided destination AzureFunctionEventSubscriptionDestinationProperties from our AzureFunctionEventSubscriptionDestinationProperties
func (azureFunctionEventSubscriptionDestinationProperties *AzureFunctionEventSubscriptionDestinationProperties) AssignPropertiesToAzureFunctionEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.AzureFunctionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(azureFunctionEventSubscriptionDestinationProperties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(azureFunctionEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes)

	// ResourceReference
	if azureFunctionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := azureFunctionEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"EventHub"}
type EventHubEventSubscriptionDestinationEndpointType string

const EventHubEventSubscriptionDestinationEndpointTypeEventHub = EventHubEventSubscriptionDestinationEndpointType("EventHub")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/EventHubEventSubscriptionDestinationProperties
type EventHubEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of an
	//Event Hub destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EventHubEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if eventHubEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result EventHubEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if eventHubEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*eventHubEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EventHubEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EventHubEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EventHubEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromEventHubEventSubscriptionDestinationProperties populates our EventHubEventSubscriptionDestinationProperties from the provided source EventHubEventSubscriptionDestinationProperties
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) AssignPropertiesFromEventHubEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		eventHubEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		eventHubEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEventHubEventSubscriptionDestinationProperties populates the provided destination EventHubEventSubscriptionDestinationProperties from our EventHubEventSubscriptionDestinationProperties
func (eventHubEventSubscriptionDestinationProperties *EventHubEventSubscriptionDestinationProperties) AssignPropertiesToEventHubEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.EventHubEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if eventHubEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := eventHubEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"HybridConnection"}
type HybridConnectionEventSubscriptionDestinationEndpointType string

const HybridConnectionEventSubscriptionDestinationEndpointTypeHybridConnection = HybridConnectionEventSubscriptionDestinationEndpointType("HybridConnection")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/HybridConnectionEventSubscriptionDestinationProperties
type HybridConnectionEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource ID of an hybrid connection that is the
	//destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &HybridConnectionEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if hybridConnectionEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result HybridConnectionEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if hybridConnectionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*hybridConnectionEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &HybridConnectionEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(HybridConnectionEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HybridConnectionEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties populates our HybridConnectionEventSubscriptionDestinationProperties from the provided source HybridConnectionEventSubscriptionDestinationProperties
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) AssignPropertiesFromHybridConnectionEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		hybridConnectionEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		hybridConnectionEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties populates the provided destination HybridConnectionEventSubscriptionDestinationProperties from our HybridConnectionEventSubscriptionDestinationProperties
func (hybridConnectionEventSubscriptionDestinationProperties *HybridConnectionEventSubscriptionDestinationProperties) AssignPropertiesToHybridConnectionEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.HybridConnectionEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if hybridConnectionEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := hybridConnectionEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ServiceBusQueue"}
type ServiceBusQueueEventSubscriptionDestinationEndpointType string

const ServiceBusQueueEventSubscriptionDestinationEndpointTypeServiceBusQueue = ServiceBusQueueEventSubscriptionDestinationEndpointType("ServiceBusQueue")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusQueueEventSubscriptionDestinationProperties
type ServiceBusQueueEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Service Bus destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusQueueEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result ServiceBusQueueEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties populates our ServiceBusQueueEventSubscriptionDestinationProperties from the provided source ServiceBusQueueEventSubscriptionDestinationProperties
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignPropertiesFromServiceBusQueueEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties populates the provided destination ServiceBusQueueEventSubscriptionDestinationProperties from our ServiceBusQueueEventSubscriptionDestinationProperties
func (serviceBusQueueEventSubscriptionDestinationProperties *ServiceBusQueueEventSubscriptionDestinationProperties) AssignPropertiesToServiceBusQueueEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.ServiceBusQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := serviceBusQueueEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ServiceBusTopic"}
type ServiceBusTopicEventSubscriptionDestinationEndpointType string

const ServiceBusTopicEventSubscriptionDestinationEndpointTypeServiceBusTopic = ServiceBusTopicEventSubscriptionDestinationEndpointType("ServiceBusTopic")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/ServiceBusTopicEventSubscriptionDestinationProperties
type ServiceBusTopicEventSubscriptionDestinationProperties struct {
	//ResourceReference: The Azure Resource Id that represents the endpoint of the
	//Service Bus Topic destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ServiceBusTopicEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceBusTopicEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result ServiceBusTopicEventSubscriptionDestinationPropertiesARM

	// Set property ‘ResourceId’:
	if serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServiceBusTopicEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ServiceBusTopicEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServiceBusTopicEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties populates our ServiceBusTopicEventSubscriptionDestinationProperties from the provided source ServiceBusTopicEventSubscriptionDestinationProperties
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignPropertiesFromServiceBusTopicEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties populates the provided destination ServiceBusTopicEventSubscriptionDestinationProperties from our ServiceBusTopicEventSubscriptionDestinationProperties
func (serviceBusTopicEventSubscriptionDestinationProperties *ServiceBusTopicEventSubscriptionDestinationProperties) AssignPropertiesToServiceBusTopicEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.ServiceBusTopicEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := serviceBusTopicEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"StorageQueue"}
type StorageQueueEventSubscriptionDestinationEndpointType string

const StorageQueueEventSubscriptionDestinationEndpointTypeStorageQueue = StorageQueueEventSubscriptionDestinationEndpointType("StorageQueue")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/StorageQueueEventSubscriptionDestinationProperties
type StorageQueueEventSubscriptionDestinationProperties struct {
	//QueueName: The name of the Storage queue under a storage account that is the
	//destination of an event subscription.
	QueueName *string `json:"queueName,omitempty"`

	//ResourceReference: The Azure Resource ID of the storage account that contains
	//the queue that is the destination of an event subscription.
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageQueueEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storageQueueEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result StorageQueueEventSubscriptionDestinationPropertiesARM

	// Set property ‘QueueName’:
	if storageQueueEventSubscriptionDestinationProperties.QueueName != nil {
		queueName := *storageQueueEventSubscriptionDestinationProperties.QueueName
		result.QueueName = &queueName
	}

	// Set property ‘ResourceId’:
	if storageQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*storageQueueEventSubscriptionDestinationProperties.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageQueueEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageQueueEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageQueueEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘QueueName’:
	if typedInput.QueueName != nil {
		queueName := *typedInput.QueueName
		storageQueueEventSubscriptionDestinationProperties.QueueName = &queueName
	}

	// no assignment for property ‘ResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties populates our StorageQueueEventSubscriptionDestinationProperties from the provided source StorageQueueEventSubscriptionDestinationProperties
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) AssignPropertiesFromStorageQueueEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties) error {

	// QueueName
	storageQueueEventSubscriptionDestinationProperties.QueueName = genruntime.ClonePointerToString(source.QueueName)

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		storageQueueEventSubscriptionDestinationProperties.ResourceReference = &resourceReference
	} else {
		storageQueueEventSubscriptionDestinationProperties.ResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties populates the provided destination StorageQueueEventSubscriptionDestinationProperties from our StorageQueueEventSubscriptionDestinationProperties
func (storageQueueEventSubscriptionDestinationProperties *StorageQueueEventSubscriptionDestinationProperties) AssignPropertiesToStorageQueueEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.StorageQueueEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// QueueName
	destination.QueueName = genruntime.ClonePointerToString(storageQueueEventSubscriptionDestinationProperties.QueueName)

	// ResourceReference
	if storageQueueEventSubscriptionDestinationProperties.ResourceReference != nil {
		resourceReference := storageQueueEventSubscriptionDestinationProperties.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"WebHook"}
type WebHookEventSubscriptionDestinationEndpointType string

const WebHookEventSubscriptionDestinationEndpointTypeWebHook = WebHookEventSubscriptionDestinationEndpointType("WebHook")

//Generated from: https://schema.management.azure.com/schemas/2020-06-01/Microsoft.EventGrid.json#/definitions/WebHookEventSubscriptionDestinationProperties
type WebHookEventSubscriptionDestinationProperties struct {
	//AzureActiveDirectoryApplicationIdOrUri: The Azure Active Directory Application
	//ID or URI to get the access token that will be included as the bearer token in
	//delivery requests.
	AzureActiveDirectoryApplicationIdOrUri *string `json:"azureActiveDirectoryApplicationIdOrUri,omitempty"`

	//AzureActiveDirectoryTenantId: The Azure Active Directory Tenant ID to get the
	//access token that will be included as the bearer token in delivery requests.
	AzureActiveDirectoryTenantId *string `json:"azureActiveDirectoryTenantId,omitempty"`

	//EndpointUrl: The URL that represents the endpoint of the destination of an event
	//subscription.
	EndpointUrl *string `json:"endpointUrl,omitempty"`

	//MaxEventsPerBatch: Maximum number of events per batch.
	MaxEventsPerBatch *int `json:"maxEventsPerBatch,omitempty"`

	//PreferredBatchSizeInKilobytes: Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `json:"preferredBatchSizeInKilobytes,omitempty"`
}

var _ genruntime.ARMTransformer = &WebHookEventSubscriptionDestinationProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if webHookEventSubscriptionDestinationProperties == nil {
		return nil, nil
	}
	var result WebHookEventSubscriptionDestinationPropertiesARM

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri
		result.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId
		result.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if webHookEventSubscriptionDestinationProperties.EndpointUrl != nil {
		endpointUrl := *webHookEventSubscriptionDestinationProperties.EndpointUrl
		result.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch
		result.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes
		result.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &WebHookEventSubscriptionDestinationPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(WebHookEventSubscriptionDestinationPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected WebHookEventSubscriptionDestinationPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureActiveDirectoryApplicationIdOrUri’:
	if typedInput.AzureActiveDirectoryApplicationIdOrUri != nil {
		azureActiveDirectoryApplicationIdOrUri := *typedInput.AzureActiveDirectoryApplicationIdOrUri
		webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri = &azureActiveDirectoryApplicationIdOrUri
	}

	// Set property ‘AzureActiveDirectoryTenantId’:
	if typedInput.AzureActiveDirectoryTenantId != nil {
		azureActiveDirectoryTenantId := *typedInput.AzureActiveDirectoryTenantId
		webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId = &azureActiveDirectoryTenantId
	}

	// Set property ‘EndpointUrl’:
	if typedInput.EndpointUrl != nil {
		endpointUrl := *typedInput.EndpointUrl
		webHookEventSubscriptionDestinationProperties.EndpointUrl = &endpointUrl
	}

	// Set property ‘MaxEventsPerBatch’:
	if typedInput.MaxEventsPerBatch != nil {
		maxEventsPerBatch := *typedInput.MaxEventsPerBatch
		webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch = &maxEventsPerBatch
	}

	// Set property ‘PreferredBatchSizeInKilobytes’:
	if typedInput.PreferredBatchSizeInKilobytes != nil {
		preferredBatchSizeInKilobytes := *typedInput.PreferredBatchSizeInKilobytes
		webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = &preferredBatchSizeInKilobytes
	}

	// No error
	return nil
}

// AssignPropertiesFromWebHookEventSubscriptionDestinationProperties populates our WebHookEventSubscriptionDestinationProperties from the provided source WebHookEventSubscriptionDestinationProperties
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) AssignPropertiesFromWebHookEventSubscriptionDestinationProperties(source *v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties) error {

	// AzureActiveDirectoryApplicationIdOrUri
	webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(source.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(source.AzureActiveDirectoryTenantId)

	// EndpointUrl
	webHookEventSubscriptionDestinationProperties.EndpointUrl = genruntime.ClonePointerToString(source.EndpointUrl)

	// MaxEventsPerBatch
	webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch = genruntime.ClonePointerToInt(source.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(source.PreferredBatchSizeInKilobytes)

	// No error
	return nil
}

// AssignPropertiesToWebHookEventSubscriptionDestinationProperties populates the provided destination WebHookEventSubscriptionDestinationProperties from our WebHookEventSubscriptionDestinationProperties
func (webHookEventSubscriptionDestinationProperties *WebHookEventSubscriptionDestinationProperties) AssignPropertiesToWebHookEventSubscriptionDestinationProperties(destination *v1alpha1api20200601storage.WebHookEventSubscriptionDestinationProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureActiveDirectoryApplicationIdOrUri
	destination.AzureActiveDirectoryApplicationIdOrUri = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryApplicationIdOrUri)

	// AzureActiveDirectoryTenantId
	destination.AzureActiveDirectoryTenantId = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.AzureActiveDirectoryTenantId)

	// EndpointUrl
	destination.EndpointUrl = genruntime.ClonePointerToString(webHookEventSubscriptionDestinationProperties.EndpointUrl)

	// MaxEventsPerBatch
	destination.MaxEventsPerBatch = genruntime.ClonePointerToInt(webHookEventSubscriptionDestinationProperties.MaxEventsPerBatch)

	// PreferredBatchSizeInKilobytes
	destination.PreferredBatchSizeInKilobytes = genruntime.ClonePointerToInt(webHookEventSubscriptionDestinationProperties.PreferredBatchSizeInKilobytes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BoolEquals"}
type AdvancedFilterBoolEqualsAdvancedFilterOperatorType string

const AdvancedFilterBoolEqualsAdvancedFilterOperatorTypeBoolEquals = AdvancedFilterBoolEqualsAdvancedFilterOperatorType("BoolEquals")

// +kubebuilder:validation:Enum={"NumberGreaterThan"}
type AdvancedFilterNumberGreaterThanAdvancedFilterOperatorType string

const AdvancedFilterNumberGreaterThanAdvancedFilterOperatorTypeNumberGreaterThan = AdvancedFilterNumberGreaterThanAdvancedFilterOperatorType("NumberGreaterThan")

// +kubebuilder:validation:Enum={"NumberGreaterThanOrEquals"}
type AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorType string

const AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorTypeNumberGreaterThanOrEquals = AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorType("NumberGreaterThanOrEquals")

// +kubebuilder:validation:Enum={"NumberIn"}
type AdvancedFilterNumberInAdvancedFilterOperatorType string

const AdvancedFilterNumberInAdvancedFilterOperatorTypeNumberIn = AdvancedFilterNumberInAdvancedFilterOperatorType("NumberIn")

// +kubebuilder:validation:Enum={"NumberLessThan"}
type AdvancedFilterNumberLessThanAdvancedFilterOperatorType string

const AdvancedFilterNumberLessThanAdvancedFilterOperatorTypeNumberLessThan = AdvancedFilterNumberLessThanAdvancedFilterOperatorType("NumberLessThan")

// +kubebuilder:validation:Enum={"NumberLessThanOrEquals"}
type AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorType string

const AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorTypeNumberLessThanOrEquals = AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorType("NumberLessThanOrEquals")

// +kubebuilder:validation:Enum={"NumberNotIn"}
type AdvancedFilterNumberNotInAdvancedFilterOperatorType string

const AdvancedFilterNumberNotInAdvancedFilterOperatorTypeNumberNotIn = AdvancedFilterNumberNotInAdvancedFilterOperatorType("NumberNotIn")

// +kubebuilder:validation:Enum={"StringBeginsWith"}
type AdvancedFilterStringBeginsWithAdvancedFilterOperatorType string

const AdvancedFilterStringBeginsWithAdvancedFilterOperatorTypeStringBeginsWith = AdvancedFilterStringBeginsWithAdvancedFilterOperatorType("StringBeginsWith")

// +kubebuilder:validation:Enum={"StringContains"}
type AdvancedFilterStringContainsAdvancedFilterOperatorType string

const AdvancedFilterStringContainsAdvancedFilterOperatorTypeStringContains = AdvancedFilterStringContainsAdvancedFilterOperatorType("StringContains")

// +kubebuilder:validation:Enum={"StringEndsWith"}
type AdvancedFilterStringEndsWithAdvancedFilterOperatorType string

const AdvancedFilterStringEndsWithAdvancedFilterOperatorTypeStringEndsWith = AdvancedFilterStringEndsWithAdvancedFilterOperatorType("StringEndsWith")

// +kubebuilder:validation:Enum={"StringIn"}
type AdvancedFilterStringInAdvancedFilterOperatorType string

const AdvancedFilterStringInAdvancedFilterOperatorTypeStringIn = AdvancedFilterStringInAdvancedFilterOperatorType("StringIn")

// +kubebuilder:validation:Enum={"StringNotIn"}
type AdvancedFilterStringNotInAdvancedFilterOperatorType string

const AdvancedFilterStringNotInAdvancedFilterOperatorTypeStringNotIn = AdvancedFilterStringNotInAdvancedFilterOperatorType("StringNotIn")

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
