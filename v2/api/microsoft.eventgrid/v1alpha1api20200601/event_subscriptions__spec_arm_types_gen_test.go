// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20200601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_EventSubscriptions_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptions_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionsSpecARM, EventSubscriptionsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionsSpecARM runs a test to see if a specific instance of EventSubscriptions_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionsSpecARM(subject EventSubscriptions_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptions_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptions_SpecARM instances for property testing - lazily instantiated by
//EventSubscriptionsSpecARMGenerator()
var eventSubscriptionsSpecARMGenerator gopter.Gen

// EventSubscriptionsSpecARMGenerator returns a generator of EventSubscriptions_SpecARM instances for property testing.
// We first initialize eventSubscriptionsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionsSpecARMGenerator() gopter.Gen {
	if eventSubscriptionsSpecARMGenerator != nil {
		return eventSubscriptionsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionsSpecARM(generators)
	eventSubscriptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptions_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionsSpecARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionsSpecARM(generators)
	eventSubscriptionsSpecARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptions_SpecARM{}), generators)

	return eventSubscriptionsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionsSpecARM(gens map[string]gopter.Gen) {
	gens["APIVersion"] = gen.OneConstOf(EventSubscriptionsSpecAPIVersion20200601)
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.OneConstOf(EventSubscriptionsSpecTypeMicrosoftEventGridEventSubscriptions)
}

// AddRelatedPropertyGeneratorsForEventSubscriptionsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionsSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = EventSubscriptionPropertiesARMGenerator()
}

func Test_EventSubscriptionPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionPropertiesARM, EventSubscriptionPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionPropertiesARM runs a test to see if a specific instance of EventSubscriptionPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionPropertiesARM(subject EventSubscriptionPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionPropertiesARM instances for property testing - lazily instantiated by
//EventSubscriptionPropertiesARMGenerator()
var eventSubscriptionPropertiesARMGenerator gopter.Gen

// EventSubscriptionPropertiesARMGenerator returns a generator of EventSubscriptionPropertiesARM instances for property testing.
// We first initialize eventSubscriptionPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionPropertiesARMGenerator() gopter.Gen {
	if eventSubscriptionPropertiesARMGenerator != nil {
		return eventSubscriptionPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesARM(generators)
	eventSubscriptionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesARM(generators)
	eventSubscriptionPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionPropertiesARM{}), generators)

	return eventSubscriptionPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionPropertiesARM(gens map[string]gopter.Gen) {
	gens["EventDeliverySchema"] = gen.PtrOf(gen.OneConstOf(EventSubscriptionPropertiesEventDeliverySchemaCloudEventSchemaV10, EventSubscriptionPropertiesEventDeliverySchemaCustomInputSchema, EventSubscriptionPropertiesEventDeliverySchemaEventGridSchema))
	gens["ExpirationTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionPropertiesARM(gens map[string]gopter.Gen) {
	gens["DeadLetterDestination"] = gen.PtrOf(StorageBlobDeadLetterDestinationARMGenerator())
	gens["Destination"] = gen.PtrOf(EventSubscriptionDestinationARMGenerator())
	gens["Filter"] = gen.PtrOf(EventSubscriptionFilterARMGenerator())
	gens["RetryPolicy"] = gen.PtrOf(RetryPolicyARMGenerator())
}

func Test_EventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionDestinationARM, EventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionDestinationARM runs a test to see if a specific instance of EventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionDestinationARM(subject EventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//EventSubscriptionDestinationARMGenerator()
var eventSubscriptionDestinationARMGenerator gopter.Gen

// EventSubscriptionDestinationARMGenerator returns a generator of EventSubscriptionDestinationARM instances for property testing.
func EventSubscriptionDestinationARMGenerator() gopter.Gen {
	if eventSubscriptionDestinationARMGenerator != nil {
		return eventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForEventSubscriptionDestinationARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(EventSubscriptionDestinationARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	eventSubscriptionDestinationARMGenerator = gen.OneGenOf(gens...)

	return eventSubscriptionDestinationARMGenerator
}

// AddRelatedPropertyGeneratorsForEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["AzureFunctionEventSubscriptionDestination"] = AzureFunctionEventSubscriptionDestinationARMGenerator().Map(func(it AzureFunctionEventSubscriptionDestinationARM) *AzureFunctionEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["EventHubEventSubscriptionDestination"] = EventHubEventSubscriptionDestinationARMGenerator().Map(func(it EventHubEventSubscriptionDestinationARM) *EventHubEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["HybridConnectionEventSubscriptionDestination"] = HybridConnectionEventSubscriptionDestinationARMGenerator().Map(func(it HybridConnectionEventSubscriptionDestinationARM) *HybridConnectionEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServiceBusQueueEventSubscriptionDestination"] = ServiceBusQueueEventSubscriptionDestinationARMGenerator().Map(func(it ServiceBusQueueEventSubscriptionDestinationARM) *ServiceBusQueueEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServiceBusTopicEventSubscriptionDestination"] = ServiceBusTopicEventSubscriptionDestinationARMGenerator().Map(func(it ServiceBusTopicEventSubscriptionDestinationARM) *ServiceBusTopicEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["StorageQueueEventSubscriptionDestination"] = StorageQueueEventSubscriptionDestinationARMGenerator().Map(func(it StorageQueueEventSubscriptionDestinationARM) *StorageQueueEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
	gens["WebHookEventSubscriptionDestination"] = WebHookEventSubscriptionDestinationARMGenerator().Map(func(it WebHookEventSubscriptionDestinationARM) *WebHookEventSubscriptionDestinationARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_EventSubscriptionFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventSubscriptionFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSubscriptionFilterARM, EventSubscriptionFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSubscriptionFilterARM runs a test to see if a specific instance of EventSubscriptionFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSubscriptionFilterARM(subject EventSubscriptionFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventSubscriptionFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventSubscriptionFilterARM instances for property testing - lazily instantiated by
//EventSubscriptionFilterARMGenerator()
var eventSubscriptionFilterARMGenerator gopter.Gen

// EventSubscriptionFilterARMGenerator returns a generator of EventSubscriptionFilterARM instances for property testing.
// We first initialize eventSubscriptionFilterARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventSubscriptionFilterARMGenerator() gopter.Gen {
	if eventSubscriptionFilterARMGenerator != nil {
		return eventSubscriptionFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilterARM(generators)
	eventSubscriptionFilterARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilterARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSubscriptionFilterARM(generators)
	AddRelatedPropertyGeneratorsForEventSubscriptionFilterARM(generators)
	eventSubscriptionFilterARMGenerator = gen.Struct(reflect.TypeOf(EventSubscriptionFilterARM{}), generators)

	return eventSubscriptionFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSubscriptionFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSubscriptionFilterARM(gens map[string]gopter.Gen) {
	gens["IncludedEventTypes"] = gen.SliceOf(gen.AlphaString())
	gens["IsSubjectCaseSensitive"] = gen.PtrOf(gen.Bool())
	gens["SubjectBeginsWith"] = gen.PtrOf(gen.AlphaString())
	gens["SubjectEndsWith"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEventSubscriptionFilterARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventSubscriptionFilterARM(gens map[string]gopter.Gen) {
	gens["AdvancedFilters"] = gen.SliceOf(AdvancedFilterARMGenerator())
}

func Test_RetryPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetryPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetryPolicyARM, RetryPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetryPolicyARM runs a test to see if a specific instance of RetryPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetryPolicyARM(subject RetryPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetryPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetryPolicyARM instances for property testing - lazily instantiated by RetryPolicyARMGenerator()
var retryPolicyARMGenerator gopter.Gen

// RetryPolicyARMGenerator returns a generator of RetryPolicyARM instances for property testing.
func RetryPolicyARMGenerator() gopter.Gen {
	if retryPolicyARMGenerator != nil {
		return retryPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetryPolicyARM(generators)
	retryPolicyARMGenerator = gen.Struct(reflect.TypeOf(RetryPolicyARM{}), generators)

	return retryPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForRetryPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetryPolicyARM(gens map[string]gopter.Gen) {
	gens["EventTimeToLiveInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxDeliveryAttempts"] = gen.PtrOf(gen.Int())
}

func Test_StorageBlobDeadLetterDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageBlobDeadLetterDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageBlobDeadLetterDestinationARM, StorageBlobDeadLetterDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageBlobDeadLetterDestinationARM runs a test to see if a specific instance of StorageBlobDeadLetterDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageBlobDeadLetterDestinationARM(subject StorageBlobDeadLetterDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageBlobDeadLetterDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageBlobDeadLetterDestinationARM instances for property testing - lazily instantiated by
//StorageBlobDeadLetterDestinationARMGenerator()
var storageBlobDeadLetterDestinationARMGenerator gopter.Gen

// StorageBlobDeadLetterDestinationARMGenerator returns a generator of StorageBlobDeadLetterDestinationARM instances for property testing.
// We first initialize storageBlobDeadLetterDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageBlobDeadLetterDestinationARMGenerator() gopter.Gen {
	if storageBlobDeadLetterDestinationARMGenerator != nil {
		return storageBlobDeadLetterDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationARM(generators)
	storageBlobDeadLetterDestinationARMGenerator = gen.Struct(reflect.TypeOf(StorageBlobDeadLetterDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationARM(generators)
	AddRelatedPropertyGeneratorsForStorageBlobDeadLetterDestinationARM(generators)
	storageBlobDeadLetterDestinationARMGenerator = gen.Struct(reflect.TypeOf(StorageBlobDeadLetterDestinationARM{}), generators)

	return storageBlobDeadLetterDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(StorageBlobDeadLetterDestinationEndpointTypeStorageBlob)
}

// AddRelatedPropertyGeneratorsForStorageBlobDeadLetterDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageBlobDeadLetterDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageBlobDeadLetterDestinationPropertiesARMGenerator())
}

func Test_AdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterARM, AdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterARM(subject AdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilterARM instances for property testing - lazily instantiated by AdvancedFilterARMGenerator()
var advancedFilterARMGenerator gopter.Gen

// AdvancedFilterARMGenerator returns a generator of AdvancedFilterARM instances for property testing.
func AdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterARMGenerator != nil {
		return advancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAdvancedFilterARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(AdvancedFilterARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	advancedFilterARMGenerator = gen.OneGenOf(gens...)

	return advancedFilterARMGenerator
}

// AddRelatedPropertyGeneratorsForAdvancedFilterARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["BoolEqualsAdvancedFilter"] = AdvancedFilterBoolEqualsAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_BoolEqualsAdvancedFilterARM) *AdvancedFilter_BoolEqualsAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberGreaterThanAdvancedFilter"] = AdvancedFilterNumberGreaterThanAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberGreaterThanAdvancedFilterARM) *AdvancedFilter_NumberGreaterThanAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberGreaterThanOrEqualsAdvancedFilter"] = AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM) *AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberInAdvancedFilter"] = AdvancedFilterNumberInAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberInAdvancedFilterARM) *AdvancedFilter_NumberInAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberLessThanAdvancedFilter"] = AdvancedFilterNumberLessThanAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberLessThanAdvancedFilterARM) *AdvancedFilter_NumberLessThanAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberLessThanOrEqualsAdvancedFilter"] = AdvancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM) *AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["NumberNotInAdvancedFilter"] = AdvancedFilterNumberNotInAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_NumberNotInAdvancedFilterARM) *AdvancedFilter_NumberNotInAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["StringBeginsWithAdvancedFilter"] = AdvancedFilterStringBeginsWithAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_StringBeginsWithAdvancedFilterARM) *AdvancedFilter_StringBeginsWithAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["StringContainsAdvancedFilter"] = AdvancedFilterStringContainsAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_StringContainsAdvancedFilterARM) *AdvancedFilter_StringContainsAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["StringEndsWithAdvancedFilter"] = AdvancedFilterStringEndsWithAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_StringEndsWithAdvancedFilterARM) *AdvancedFilter_StringEndsWithAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["StringInAdvancedFilter"] = AdvancedFilterStringInAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_StringInAdvancedFilterARM) *AdvancedFilter_StringInAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
	gens["StringNotInAdvancedFilter"] = AdvancedFilterStringNotInAdvancedFilterARMGenerator().Map(func(it AdvancedFilter_StringNotInAdvancedFilterARM) *AdvancedFilter_StringNotInAdvancedFilterARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_AzureFunctionEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFunctionEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationARM, AzureFunctionEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationARM runs a test to see if a specific instance of AzureFunctionEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationARM(subject AzureFunctionEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFunctionEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFunctionEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//AzureFunctionEventSubscriptionDestinationARMGenerator()
var azureFunctionEventSubscriptionDestinationARMGenerator gopter.Gen

// AzureFunctionEventSubscriptionDestinationARMGenerator returns a generator of AzureFunctionEventSubscriptionDestinationARM instances for property testing.
// We first initialize azureFunctionEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AzureFunctionEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if azureFunctionEventSubscriptionDestinationARMGenerator != nil {
		return azureFunctionEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM(generators)
	azureFunctionEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(AzureFunctionEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM(generators)
	azureFunctionEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(AzureFunctionEventSubscriptionDestinationARM{}), generators)

	return azureFunctionEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(AzureFunctionEventSubscriptionDestinationEndpointTypeAzureFunction)
}

// AddRelatedPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AzureFunctionEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_EventHubEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventHubEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventHubEventSubscriptionDestinationARM, EventHubEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventHubEventSubscriptionDestinationARM runs a test to see if a specific instance of EventHubEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventHubEventSubscriptionDestinationARM(subject EventHubEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventHubEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventHubEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//EventHubEventSubscriptionDestinationARMGenerator()
var eventHubEventSubscriptionDestinationARMGenerator gopter.Gen

// EventHubEventSubscriptionDestinationARMGenerator returns a generator of EventHubEventSubscriptionDestinationARM instances for property testing.
// We first initialize eventHubEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EventHubEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if eventHubEventSubscriptionDestinationARMGenerator != nil {
		return eventHubEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationARM(generators)
	eventHubEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(EventHubEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForEventHubEventSubscriptionDestinationARM(generators)
	eventHubEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(EventHubEventSubscriptionDestinationARM{}), generators)

	return eventHubEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(EventHubEventSubscriptionDestinationEndpointTypeEventHub)
}

// AddRelatedPropertyGeneratorsForEventHubEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEventHubEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EventHubEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_HybridConnectionEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HybridConnectionEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationARM, HybridConnectionEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationARM runs a test to see if a specific instance of HybridConnectionEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationARM(subject HybridConnectionEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HybridConnectionEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HybridConnectionEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//HybridConnectionEventSubscriptionDestinationARMGenerator()
var hybridConnectionEventSubscriptionDestinationARMGenerator gopter.Gen

// HybridConnectionEventSubscriptionDestinationARMGenerator returns a generator of HybridConnectionEventSubscriptionDestinationARM instances for property testing.
// We first initialize hybridConnectionEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HybridConnectionEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if hybridConnectionEventSubscriptionDestinationARMGenerator != nil {
		return hybridConnectionEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM(generators)
	hybridConnectionEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(HybridConnectionEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM(generators)
	hybridConnectionEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(HybridConnectionEventSubscriptionDestinationARM{}), generators)

	return hybridConnectionEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(HybridConnectionEventSubscriptionDestinationEndpointTypeHybridConnection)
}

// AddRelatedPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(HybridConnectionEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_ServiceBusQueueEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceBusQueueEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationARM, ServiceBusQueueEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationARM runs a test to see if a specific instance of ServiceBusQueueEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationARM(subject ServiceBusQueueEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceBusQueueEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceBusQueueEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//ServiceBusQueueEventSubscriptionDestinationARMGenerator()
var serviceBusQueueEventSubscriptionDestinationARMGenerator gopter.Gen

// ServiceBusQueueEventSubscriptionDestinationARMGenerator returns a generator of ServiceBusQueueEventSubscriptionDestinationARM instances for property testing.
// We first initialize serviceBusQueueEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceBusQueueEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if serviceBusQueueEventSubscriptionDestinationARMGenerator != nil {
		return serviceBusQueueEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM(generators)
	serviceBusQueueEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusQueueEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM(generators)
	serviceBusQueueEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusQueueEventSubscriptionDestinationARM{}), generators)

	return serviceBusQueueEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(ServiceBusQueueEventSubscriptionDestinationEndpointTypeServiceBusQueue)
}

// AddRelatedPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceBusQueueEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_ServiceBusTopicEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceBusTopicEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationARM, ServiceBusTopicEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationARM runs a test to see if a specific instance of ServiceBusTopicEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationARM(subject ServiceBusTopicEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceBusTopicEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceBusTopicEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//ServiceBusTopicEventSubscriptionDestinationARMGenerator()
var serviceBusTopicEventSubscriptionDestinationARMGenerator gopter.Gen

// ServiceBusTopicEventSubscriptionDestinationARMGenerator returns a generator of ServiceBusTopicEventSubscriptionDestinationARM instances for property testing.
// We first initialize serviceBusTopicEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceBusTopicEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if serviceBusTopicEventSubscriptionDestinationARMGenerator != nil {
		return serviceBusTopicEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM(generators)
	serviceBusTopicEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusTopicEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM(generators)
	serviceBusTopicEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusTopicEventSubscriptionDestinationARM{}), generators)

	return serviceBusTopicEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(ServiceBusTopicEventSubscriptionDestinationEndpointTypeServiceBusTopic)
}

// AddRelatedPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServiceBusTopicEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_StorageBlobDeadLetterDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageBlobDeadLetterDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageBlobDeadLetterDestinationPropertiesARM, StorageBlobDeadLetterDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageBlobDeadLetterDestinationPropertiesARM runs a test to see if a specific instance of StorageBlobDeadLetterDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageBlobDeadLetterDestinationPropertiesARM(subject StorageBlobDeadLetterDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageBlobDeadLetterDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageBlobDeadLetterDestinationPropertiesARM instances for property testing - lazily instantiated by
//StorageBlobDeadLetterDestinationPropertiesARMGenerator()
var storageBlobDeadLetterDestinationPropertiesARMGenerator gopter.Gen

// StorageBlobDeadLetterDestinationPropertiesARMGenerator returns a generator of StorageBlobDeadLetterDestinationPropertiesARM instances for property testing.
func StorageBlobDeadLetterDestinationPropertiesARMGenerator() gopter.Gen {
	if storageBlobDeadLetterDestinationPropertiesARMGenerator != nil {
		return storageBlobDeadLetterDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationPropertiesARM(generators)
	storageBlobDeadLetterDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(StorageBlobDeadLetterDestinationPropertiesARM{}), generators)

	return storageBlobDeadLetterDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageBlobDeadLetterDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["BlobContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_StorageQueueEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageQueueEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationARM, StorageQueueEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationARM runs a test to see if a specific instance of StorageQueueEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationARM(subject StorageQueueEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageQueueEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageQueueEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//StorageQueueEventSubscriptionDestinationARMGenerator()
var storageQueueEventSubscriptionDestinationARMGenerator gopter.Gen

// StorageQueueEventSubscriptionDestinationARMGenerator returns a generator of StorageQueueEventSubscriptionDestinationARM instances for property testing.
// We first initialize storageQueueEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func StorageQueueEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if storageQueueEventSubscriptionDestinationARMGenerator != nil {
		return storageQueueEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM(generators)
	storageQueueEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(StorageQueueEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM(generators)
	storageQueueEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(StorageQueueEventSubscriptionDestinationARM{}), generators)

	return storageQueueEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(StorageQueueEventSubscriptionDestinationEndpointTypeStorageQueue)
}

// AddRelatedPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageQueueEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(StorageQueueEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_WebHookEventSubscriptionDestinationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebHookEventSubscriptionDestinationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebHookEventSubscriptionDestinationARM, WebHookEventSubscriptionDestinationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebHookEventSubscriptionDestinationARM runs a test to see if a specific instance of WebHookEventSubscriptionDestinationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebHookEventSubscriptionDestinationARM(subject WebHookEventSubscriptionDestinationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebHookEventSubscriptionDestinationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebHookEventSubscriptionDestinationARM instances for property testing - lazily instantiated by
//WebHookEventSubscriptionDestinationARMGenerator()
var webHookEventSubscriptionDestinationARMGenerator gopter.Gen

// WebHookEventSubscriptionDestinationARMGenerator returns a generator of WebHookEventSubscriptionDestinationARM instances for property testing.
// We first initialize webHookEventSubscriptionDestinationARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WebHookEventSubscriptionDestinationARMGenerator() gopter.Gen {
	if webHookEventSubscriptionDestinationARMGenerator != nil {
		return webHookEventSubscriptionDestinationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationARM(generators)
	webHookEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(WebHookEventSubscriptionDestinationARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationARM(generators)
	AddRelatedPropertyGeneratorsForWebHookEventSubscriptionDestinationARM(generators)
	webHookEventSubscriptionDestinationARMGenerator = gen.Struct(reflect.TypeOf(WebHookEventSubscriptionDestinationARM{}), generators)

	return webHookEventSubscriptionDestinationARMGenerator
}

// AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["EndpointType"] = gen.OneConstOf(WebHookEventSubscriptionDestinationEndpointTypeWebHook)
}

// AddRelatedPropertyGeneratorsForWebHookEventSubscriptionDestinationARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWebHookEventSubscriptionDestinationARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WebHookEventSubscriptionDestinationPropertiesARMGenerator())
}

func Test_AdvancedFilter_BoolEqualsAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_BoolEqualsAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterBoolEqualsAdvancedFilterARM, AdvancedFilterBoolEqualsAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterBoolEqualsAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_BoolEqualsAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterBoolEqualsAdvancedFilterARM(subject AdvancedFilter_BoolEqualsAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_BoolEqualsAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_BoolEqualsAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterBoolEqualsAdvancedFilterARMGenerator()
var advancedFilterBoolEqualsAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterBoolEqualsAdvancedFilterARMGenerator returns a generator of AdvancedFilter_BoolEqualsAdvancedFilterARM instances for property testing.
func AdvancedFilterBoolEqualsAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterBoolEqualsAdvancedFilterARMGenerator != nil {
		return advancedFilterBoolEqualsAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterBoolEqualsAdvancedFilterARM(generators)
	advancedFilterBoolEqualsAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_BoolEqualsAdvancedFilterARM{}), generators)

	return advancedFilterBoolEqualsAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterBoolEqualsAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterBoolEqualsAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterBoolEqualsAdvancedFilterOperatorTypeBoolEquals)
	gens["Value"] = gen.PtrOf(gen.Bool())
}

func Test_AdvancedFilter_NumberGreaterThanAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberGreaterThanAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberGreaterThanAdvancedFilterARM, AdvancedFilterNumberGreaterThanAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberGreaterThanAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberGreaterThanAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberGreaterThanAdvancedFilterARM(subject AdvancedFilter_NumberGreaterThanAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberGreaterThanAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberGreaterThanAdvancedFilterARM instances for property testing - lazily instantiated
//by AdvancedFilterNumberGreaterThanAdvancedFilterARMGenerator()
var advancedFilterNumberGreaterThanAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberGreaterThanAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberGreaterThanAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberGreaterThanAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberGreaterThanAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberGreaterThanAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanAdvancedFilterARM(generators)
	advancedFilterNumberGreaterThanAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberGreaterThanAdvancedFilterARM{}), generators)

	return advancedFilterNumberGreaterThanAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberGreaterThanAdvancedFilterOperatorTypeNumberGreaterThan)
	gens["Value"] = gen.PtrOf(gen.Float64())
}

func Test_AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM, AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM(subject AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM instances for property testing - lazily
//instantiated by AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator()
var advancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM(generators)
	advancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberGreaterThanOrEqualsAdvancedFilterARM{}), generators)

	return advancedFilterNumberGreaterThanOrEqualsAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberGreaterThanOrEqualsAdvancedFilterOperatorTypeNumberGreaterThanOrEquals)
	gens["Value"] = gen.PtrOf(gen.Float64())
}

func Test_AdvancedFilter_NumberInAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberInAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberInAdvancedFilterARM, AdvancedFilterNumberInAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberInAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberInAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberInAdvancedFilterARM(subject AdvancedFilter_NumberInAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberInAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberInAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterNumberInAdvancedFilterARMGenerator()
var advancedFilterNumberInAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberInAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberInAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberInAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberInAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberInAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberInAdvancedFilterARM(generators)
	advancedFilterNumberInAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberInAdvancedFilterARM{}), generators)

	return advancedFilterNumberInAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberInAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberInAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberInAdvancedFilterOperatorTypeNumberIn)
	gens["Values"] = gen.SliceOf(gen.Float64())
}

func Test_AdvancedFilter_NumberLessThanAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberLessThanAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberLessThanAdvancedFilterARM, AdvancedFilterNumberLessThanAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberLessThanAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberLessThanAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberLessThanAdvancedFilterARM(subject AdvancedFilter_NumberLessThanAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberLessThanAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberLessThanAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterNumberLessThanAdvancedFilterARMGenerator()
var advancedFilterNumberLessThanAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberLessThanAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberLessThanAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberLessThanAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberLessThanAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberLessThanAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanAdvancedFilterARM(generators)
	advancedFilterNumberLessThanAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberLessThanAdvancedFilterARM{}), generators)

	return advancedFilterNumberLessThanAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberLessThanAdvancedFilterOperatorTypeNumberLessThan)
	gens["Value"] = gen.PtrOf(gen.Float64())
}

func Test_AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM, AdvancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM(subject AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM instances for property testing - lazily
//instantiated by AdvancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator()
var advancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM(generators)
	advancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberLessThanOrEqualsAdvancedFilterARM{}), generators)

	return advancedFilterNumberLessThanOrEqualsAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberLessThanOrEqualsAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberLessThanOrEqualsAdvancedFilterOperatorTypeNumberLessThanOrEquals)
	gens["Value"] = gen.PtrOf(gen.Float64())
}

func Test_AdvancedFilter_NumberNotInAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_NumberNotInAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterNumberNotInAdvancedFilterARM, AdvancedFilterNumberNotInAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterNumberNotInAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_NumberNotInAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterNumberNotInAdvancedFilterARM(subject AdvancedFilter_NumberNotInAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_NumberNotInAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_NumberNotInAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterNumberNotInAdvancedFilterARMGenerator()
var advancedFilterNumberNotInAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterNumberNotInAdvancedFilterARMGenerator returns a generator of AdvancedFilter_NumberNotInAdvancedFilterARM instances for property testing.
func AdvancedFilterNumberNotInAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterNumberNotInAdvancedFilterARMGenerator != nil {
		return advancedFilterNumberNotInAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterNumberNotInAdvancedFilterARM(generators)
	advancedFilterNumberNotInAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_NumberNotInAdvancedFilterARM{}), generators)

	return advancedFilterNumberNotInAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterNumberNotInAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterNumberNotInAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterNumberNotInAdvancedFilterOperatorTypeNumberNotIn)
	gens["Values"] = gen.SliceOf(gen.Float64())
}

func Test_AdvancedFilter_StringBeginsWithAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StringBeginsWithAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterStringBeginsWithAdvancedFilterARM, AdvancedFilterStringBeginsWithAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterStringBeginsWithAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_StringBeginsWithAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterStringBeginsWithAdvancedFilterARM(subject AdvancedFilter_StringBeginsWithAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StringBeginsWithAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StringBeginsWithAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterStringBeginsWithAdvancedFilterARMGenerator()
var advancedFilterStringBeginsWithAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterStringBeginsWithAdvancedFilterARMGenerator returns a generator of AdvancedFilter_StringBeginsWithAdvancedFilterARM instances for property testing.
func AdvancedFilterStringBeginsWithAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterStringBeginsWithAdvancedFilterARMGenerator != nil {
		return advancedFilterStringBeginsWithAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterStringBeginsWithAdvancedFilterARM(generators)
	advancedFilterStringBeginsWithAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StringBeginsWithAdvancedFilterARM{}), generators)

	return advancedFilterStringBeginsWithAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterStringBeginsWithAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterStringBeginsWithAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterStringBeginsWithAdvancedFilterOperatorTypeStringBeginsWith)
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_AdvancedFilter_StringContainsAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StringContainsAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterStringContainsAdvancedFilterARM, AdvancedFilterStringContainsAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterStringContainsAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_StringContainsAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterStringContainsAdvancedFilterARM(subject AdvancedFilter_StringContainsAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StringContainsAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StringContainsAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterStringContainsAdvancedFilterARMGenerator()
var advancedFilterStringContainsAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterStringContainsAdvancedFilterARMGenerator returns a generator of AdvancedFilter_StringContainsAdvancedFilterARM instances for property testing.
func AdvancedFilterStringContainsAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterStringContainsAdvancedFilterARMGenerator != nil {
		return advancedFilterStringContainsAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterStringContainsAdvancedFilterARM(generators)
	advancedFilterStringContainsAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StringContainsAdvancedFilterARM{}), generators)

	return advancedFilterStringContainsAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterStringContainsAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterStringContainsAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterStringContainsAdvancedFilterOperatorTypeStringContains)
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_AdvancedFilter_StringEndsWithAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StringEndsWithAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterStringEndsWithAdvancedFilterARM, AdvancedFilterStringEndsWithAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterStringEndsWithAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_StringEndsWithAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterStringEndsWithAdvancedFilterARM(subject AdvancedFilter_StringEndsWithAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StringEndsWithAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StringEndsWithAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterStringEndsWithAdvancedFilterARMGenerator()
var advancedFilterStringEndsWithAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterStringEndsWithAdvancedFilterARMGenerator returns a generator of AdvancedFilter_StringEndsWithAdvancedFilterARM instances for property testing.
func AdvancedFilterStringEndsWithAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterStringEndsWithAdvancedFilterARMGenerator != nil {
		return advancedFilterStringEndsWithAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterStringEndsWithAdvancedFilterARM(generators)
	advancedFilterStringEndsWithAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StringEndsWithAdvancedFilterARM{}), generators)

	return advancedFilterStringEndsWithAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterStringEndsWithAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterStringEndsWithAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterStringEndsWithAdvancedFilterOperatorTypeStringEndsWith)
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_AdvancedFilter_StringInAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StringInAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterStringInAdvancedFilterARM, AdvancedFilterStringInAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterStringInAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_StringInAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterStringInAdvancedFilterARM(subject AdvancedFilter_StringInAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StringInAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StringInAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterStringInAdvancedFilterARMGenerator()
var advancedFilterStringInAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterStringInAdvancedFilterARMGenerator returns a generator of AdvancedFilter_StringInAdvancedFilterARM instances for property testing.
func AdvancedFilterStringInAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterStringInAdvancedFilterARMGenerator != nil {
		return advancedFilterStringInAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterStringInAdvancedFilterARM(generators)
	advancedFilterStringInAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StringInAdvancedFilterARM{}), generators)

	return advancedFilterStringInAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterStringInAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterStringInAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterStringInAdvancedFilterOperatorTypeStringIn)
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_AdvancedFilter_StringNotInAdvancedFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedFilter_StringNotInAdvancedFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedFilterStringNotInAdvancedFilterARM, AdvancedFilterStringNotInAdvancedFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedFilterStringNotInAdvancedFilterARM runs a test to see if a specific instance of AdvancedFilter_StringNotInAdvancedFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedFilterStringNotInAdvancedFilterARM(subject AdvancedFilter_StringNotInAdvancedFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedFilter_StringNotInAdvancedFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedFilter_StringNotInAdvancedFilterARM instances for property testing - lazily instantiated by
//AdvancedFilterStringNotInAdvancedFilterARMGenerator()
var advancedFilterStringNotInAdvancedFilterARMGenerator gopter.Gen

// AdvancedFilterStringNotInAdvancedFilterARMGenerator returns a generator of AdvancedFilter_StringNotInAdvancedFilterARM instances for property testing.
func AdvancedFilterStringNotInAdvancedFilterARMGenerator() gopter.Gen {
	if advancedFilterStringNotInAdvancedFilterARMGenerator != nil {
		return advancedFilterStringNotInAdvancedFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedFilterStringNotInAdvancedFilterARM(generators)
	advancedFilterStringNotInAdvancedFilterARMGenerator = gen.Struct(reflect.TypeOf(AdvancedFilter_StringNotInAdvancedFilterARM{}), generators)

	return advancedFilterStringNotInAdvancedFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedFilterStringNotInAdvancedFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedFilterStringNotInAdvancedFilterARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["OperatorType"] = gen.OneConstOf(AdvancedFilterStringNotInAdvancedFilterOperatorTypeStringNotIn)
	gens["Values"] = gen.SliceOf(gen.AlphaString())
}

func Test_AzureFunctionEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFunctionEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationPropertiesARM, AzureFunctionEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of AzureFunctionEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFunctionEventSubscriptionDestinationPropertiesARM(subject AzureFunctionEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFunctionEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFunctionEventSubscriptionDestinationPropertiesARM instances for property testing - lazily
//instantiated by AzureFunctionEventSubscriptionDestinationPropertiesARMGenerator()
var azureFunctionEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// AzureFunctionEventSubscriptionDestinationPropertiesARMGenerator returns a generator of AzureFunctionEventSubscriptionDestinationPropertiesARM instances for property testing.
func AzureFunctionEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if azureFunctionEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return azureFunctionEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationPropertiesARM(generators)
	azureFunctionEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(AzureFunctionEventSubscriptionDestinationPropertiesARM{}), generators)

	return azureFunctionEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFunctionEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["MaxEventsPerBatch"] = gen.PtrOf(gen.Int())
	gens["PreferredBatchSizeInKilobytes"] = gen.PtrOf(gen.Int())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_EventHubEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EventHubEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventHubEventSubscriptionDestinationPropertiesARM, EventHubEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventHubEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of EventHubEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventHubEventSubscriptionDestinationPropertiesARM(subject EventHubEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EventHubEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EventHubEventSubscriptionDestinationPropertiesARM instances for property testing - lazily instantiated
//by EventHubEventSubscriptionDestinationPropertiesARMGenerator()
var eventHubEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// EventHubEventSubscriptionDestinationPropertiesARMGenerator returns a generator of EventHubEventSubscriptionDestinationPropertiesARM instances for property testing.
func EventHubEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if eventHubEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return eventHubEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationPropertiesARM(generators)
	eventHubEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EventHubEventSubscriptionDestinationPropertiesARM{}), generators)

	return eventHubEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventHubEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_HybridConnectionEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HybridConnectionEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationPropertiesARM, HybridConnectionEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of HybridConnectionEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHybridConnectionEventSubscriptionDestinationPropertiesARM(subject HybridConnectionEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HybridConnectionEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HybridConnectionEventSubscriptionDestinationPropertiesARM instances for property testing - lazily
//instantiated by HybridConnectionEventSubscriptionDestinationPropertiesARMGenerator()
var hybridConnectionEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// HybridConnectionEventSubscriptionDestinationPropertiesARMGenerator returns a generator of HybridConnectionEventSubscriptionDestinationPropertiesARM instances for property testing.
func HybridConnectionEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if hybridConnectionEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return hybridConnectionEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationPropertiesARM(generators)
	hybridConnectionEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(HybridConnectionEventSubscriptionDestinationPropertiesARM{}), generators)

	return hybridConnectionEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHybridConnectionEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceBusQueueEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceBusQueueEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationPropertiesARM, ServiceBusQueueEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of ServiceBusQueueEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceBusQueueEventSubscriptionDestinationPropertiesARM(subject ServiceBusQueueEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceBusQueueEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceBusQueueEventSubscriptionDestinationPropertiesARM instances for property testing - lazily
//instantiated by ServiceBusQueueEventSubscriptionDestinationPropertiesARMGenerator()
var serviceBusQueueEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// ServiceBusQueueEventSubscriptionDestinationPropertiesARMGenerator returns a generator of ServiceBusQueueEventSubscriptionDestinationPropertiesARM instances for property testing.
func ServiceBusQueueEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if serviceBusQueueEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return serviceBusQueueEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationPropertiesARM(generators)
	serviceBusQueueEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusQueueEventSubscriptionDestinationPropertiesARM{}), generators)

	return serviceBusQueueEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceBusQueueEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceBusTopicEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceBusTopicEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationPropertiesARM, ServiceBusTopicEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of ServiceBusTopicEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceBusTopicEventSubscriptionDestinationPropertiesARM(subject ServiceBusTopicEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceBusTopicEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceBusTopicEventSubscriptionDestinationPropertiesARM instances for property testing - lazily
//instantiated by ServiceBusTopicEventSubscriptionDestinationPropertiesARMGenerator()
var serviceBusTopicEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// ServiceBusTopicEventSubscriptionDestinationPropertiesARMGenerator returns a generator of ServiceBusTopicEventSubscriptionDestinationPropertiesARM instances for property testing.
func ServiceBusTopicEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if serviceBusTopicEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return serviceBusTopicEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationPropertiesARM(generators)
	serviceBusTopicEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ServiceBusTopicEventSubscriptionDestinationPropertiesARM{}), generators)

	return serviceBusTopicEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceBusTopicEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_StorageQueueEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageQueueEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationPropertiesARM, StorageQueueEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of StorageQueueEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageQueueEventSubscriptionDestinationPropertiesARM(subject StorageQueueEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageQueueEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageQueueEventSubscriptionDestinationPropertiesARM instances for property testing - lazily
//instantiated by StorageQueueEventSubscriptionDestinationPropertiesARMGenerator()
var storageQueueEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// StorageQueueEventSubscriptionDestinationPropertiesARMGenerator returns a generator of StorageQueueEventSubscriptionDestinationPropertiesARM instances for property testing.
func StorageQueueEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if storageQueueEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return storageQueueEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationPropertiesARM(generators)
	storageQueueEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(StorageQueueEventSubscriptionDestinationPropertiesARM{}), generators)

	return storageQueueEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageQueueEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["QueueName"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WebHookEventSubscriptionDestinationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WebHookEventSubscriptionDestinationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWebHookEventSubscriptionDestinationPropertiesARM, WebHookEventSubscriptionDestinationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWebHookEventSubscriptionDestinationPropertiesARM runs a test to see if a specific instance of WebHookEventSubscriptionDestinationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWebHookEventSubscriptionDestinationPropertiesARM(subject WebHookEventSubscriptionDestinationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WebHookEventSubscriptionDestinationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WebHookEventSubscriptionDestinationPropertiesARM instances for property testing - lazily instantiated by
//WebHookEventSubscriptionDestinationPropertiesARMGenerator()
var webHookEventSubscriptionDestinationPropertiesARMGenerator gopter.Gen

// WebHookEventSubscriptionDestinationPropertiesARMGenerator returns a generator of WebHookEventSubscriptionDestinationPropertiesARM instances for property testing.
func WebHookEventSubscriptionDestinationPropertiesARMGenerator() gopter.Gen {
	if webHookEventSubscriptionDestinationPropertiesARMGenerator != nil {
		return webHookEventSubscriptionDestinationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationPropertiesARM(generators)
	webHookEventSubscriptionDestinationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(WebHookEventSubscriptionDestinationPropertiesARM{}), generators)

	return webHookEventSubscriptionDestinationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWebHookEventSubscriptionDestinationPropertiesARM(gens map[string]gopter.Gen) {
	gens["AzureActiveDirectoryApplicationIdOrUri"] = gen.PtrOf(gen.AlphaString())
	gens["AzureActiveDirectoryTenantId"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointUrl"] = gen.PtrOf(gen.AlphaString())
	gens["MaxEventsPerBatch"] = gen.PtrOf(gen.Int())
	gens["PreferredBatchSizeInKilobytes"] = gen.PtrOf(gen.Int())
}
